<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2061.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>python数据可视化-matplotlib入门利用随机函数生成变化图形2 - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>python数据可视化-matplotlib入门利用随机函数生成变化图形2</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<p>&nbsp;鉴于上一篇中最后三个问题：</p> <p>1、上述程序是否能进行优化（比如功能相同的）</p> <p>2、创建三个3个实例，用了3个语句，能否建一个函数，只输入一个数n，就自动创建n个实例？同时，每个实例的num_times随机，(n比较大时，num_times应该比较小)</p> <p>3、当实现上述功能后，程序运行，只输入一个参数（创建实例的个数），就会自动生成对应的num_times，并分别调用相关函数生成对应图表。</p> <p>可以，在类Rand_moving()中计算每一步的方向和移动位置时，都用到了一个乘法公式，</p> <div class="cnblogs_code"> <pre>            x_direction = choice([1,-1])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">x的移动方向，1向上，0不变，-1向下</span>             x_distance = choice([0,1,2,3,4,5])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">x的每次移动的像素，</span>             x_step = x_direction*x_distance<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">移动方向乘以移动距离，以确定沿x移动的距离</span><span style="color: rgba(0, 0, 0, 1)">                         y_direction</span>=  choice([1,-1])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">y的移动方向，1向上，0不变，-1向下</span>             y_distance = choice([0,1,2,3,4,5])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">y的每次移动的像素，</span>             y_step = y_direction*y_distance<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">移动方向乘以移动距离，以确定沿y移动的距离</span></pre> </div> <p>因此可以整理出一个计算方法，可以直接调用，至于2，3很明显，也是可以完成的。</p> <p>第一步，将乘法公式提出来单独形成一个作用于自身的方法，代码如下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_step(self,direction,distance):</span><span style="color: rgba(0, 0, 255, 1)">return</span> distance*<span style="color: rgba(0, 0, 0, 1)">direction</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> fill_moving(self):</span><span style="color: rgba(0, 0, 255, 1)">while</span> len(self.x_values)&lt;self.num_times:<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">循环不断运行，直到漫步包含所需数量的点num_times</span>             x_step = self.get_step(choice([1,-1]),choice([0,1,2,3,4,5]))<span style="color: rgba(0, 128, 0, 1)">#直接调用get_step方法，使代码更加简洁</span>             y_step = self.get_step(choice([1,-1]),choice([0,1,2,3,4,5]))</pre> </div> <p>完成第1问，代码变得更加简洁明了。</p> <p>第2、3个问题：</p> <p>1）要能生成实例个数n，且还有对应的移动次数num_times，可考虑用字典，即实例个数为key，对应移动次数num_times为键值,当输入2时，如&nbsp; caselist={’1‘:'150000'，’2‘:'250000'}</p> <p>2）读取字典每个项目，将对应的key和value传递给由Rand_moving类创建的实例，key的个数即为需要创建实例的个数，对应的value值为移动次数。</p> <p>3）输入数字，即为字典key的个数，存入字典，同时利用随机函数生成一个num_times保存到对应的value中。</p> <p>&nbsp;完成思路：</p> <p>1，重新定义一个类 New_case() 作用：接收一个数据，并根据这个数据自动生成一个字典，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> New_case():</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义New_case类</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(128, 0, 128, 1)">__init__</span>(self,numbers):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义要创建的实例个数</span>         self.numbers=<span style="color: rgba(0, 0, 0, 1)">numbers              self.caselist</span>={}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个空的caselist字典</span>         self.case =<span style="color: rgba(0, 0, 0, 1)"> 0</span><span style="color: rgba(0, 0, 255, 1)">while</span> self.case &lt;<span style="color: rgba(0, 0, 0, 1)"> self.numbers:<span style="color: rgba(0, 128, 0, 1)">#当变量case小于给定值时</span>，             self.case</span>+= 1<span style="color: rgba(0, 0, 0, 1)">             times</span>= choice([100000,150000,200000,250000<span style="color: rgba(0, 0, 0, 1)">])<span style="color: rgba(0, 128, 0, 1)">#随机选择一个移动次数</span>             self.caselist[self.case]</span>= times<span style="color: rgba(0, 128, 0, 1)">#将value与key对应</span></pre> </div> <p>2、需要循环读取字典的key和value,并将value传递给类Rand_moving，随后再运行fill_moving()生成数据并保存到列表，随即用plt.scatter()进行绘图</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">for</span> key,value<span style="color: rgba(0, 0, 255, 1)">in</span> self.caselist.items():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">字典不为空</span>             colorkey=str(key)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">  将字典关键字转为字符串存到变量colorkey中</span>             examplecase = Rand_moving(int(value))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建实例，将对应的value值传递类Rand_moving</span>             examplecase.fill_moving()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">调用类Rand_moving中的方法fill_moving()计算移动相关数据并保存到列表中</span>             plt.figure(dpi=128,figsize=(12, 10))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建画面屏幕</span><span style="color: rgba(0, 0, 0, 1)">                       plt.scatter(examplecase.x_values,examplecase.y_values,c</span>=self.colors[colorkey],s=15<span style="color: rgba(0, 0, 0, 1)">)         plt.show()</span></pre> </div> <pre><span><br/>上篇中的代码  c=y_values, cmap=plt.cm.Reds为什么这里不再用，是因为这里循环的时候一直出现红色R</span>eds，为了对比，创建了一新字典colors{}，将生成的个数与颜色相对应。所以上述代码中修改为 c=self.colors[colorkey]<br/><br/>类New_case()&nbsp;全部代码如下：<br/><br/></pre> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt</span><span style="color: rgba(0, 0, 255, 1)">from</span> rand_moving<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> New_case():</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义New_case类</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(128, 0, 128, 1)">__init__</span>(self,numbers):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义要创建的实例个数</span>         self.numbers=<span style="color: rgba(0, 0, 0, 1)">numbers              self.caselist</span>={}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个空的cases列表</span>         self.case = 0<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">定义一个case变量</span>         self.colors={<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">2</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">orange</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">3</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">4</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">green</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">5</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">blue</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">6</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">puple</span><span style="color: rgba(128, 0, 0, 1)">'</span>}<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建了一新字典colors{}，将生成的个数与颜色相对应</span><span style="color: rgba(0, 0, 255, 1)">while</span> self.case &lt; self.numbers:<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">小于给定实例个数时</span>             self.case += 1<span style="color: rgba(0, 0, 0, 1)">             times</span>= choice([100000,150000,200000,250000])<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">随机生成一个移动次数</span>             self.caselist[self.case] = times<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将变量case作为key, times作为value保存到字典中</span><span style="color: rgba(0, 0, 255, 1)">def</span> case_moving(self):<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">重新定义一个方法，即访问字典所有项</span><span style="color: rgba(0, 0, 255, 1)">for</span> key,value<span style="color: rgba(0, 0, 255, 1)">in</span> self.caselist.items():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">字典不为空</span>             colorkey=str(key)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">  将字典关键字转为字符串存到变量colorkey中</span>             examplecase = Rand_moving(int(value))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建实例，将对应的value值传递类Rand_moving</span>             examplecase.fill_moving()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">调用类Rand_moving中的方法fill_moving()计算移动相关数据并保存到列表中</span>             plt.figure(dpi=128,figsize=(12, 10))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">创建画面屏幕</span>             plt.scatter(examplecase.x_values,examplecase.y_values,c=self.colors[colorkey],s=15)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">注意调用了上述新字典的颜色</span>         plt.show()</pre> </div> <p>3、主程序</p> <p>主程序中有一个交互，需要输入一个数据，然后调用相关相关类创建实例（<span style="color: rgba(255, 0, 0, 1)">慢慢成调包侠了！^v^</span>）</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt</span><span style="color: rgba(0, 0, 255, 1)">from</span> rand_moving<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">from</span> new_case<span style="color: rgba(0, 0, 255, 1)">import</span> *<span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Please enter the number：</span><span style="color: rgba(128, 0, 0, 1)">"</span>)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">交互，请输入一个数，模拟运行，不需要太大的数据。</span> n = input()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将输入的数据保存到变量n中，注意所有输入均为字符串，</span><span style="color: rgba(0, 0, 0, 1)"> testcase</span>= New_case(int(n))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将n转为整型数据，创建实例个数</span> testcase.case_moving()</pre> </div> <p>实际运行效果，输入4，生成4个数据图形（为展示较全，原图已缩小）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fcf53caf5d11797712f31895d54022a.jpg" alt="python数据可视化-matplotlib入门利用随机函数生成变化图形2"></p> <p>self.colors={'1':'red','2':'orange','3':'yellow','4':'green','5':'blue','6':'puple'}<span style="color: rgba(255, 0, 0, 1)">注意：图的颜色分别与colors字典中对应。</span></p> <p>当然如果觉得数轴很碍眼，那就在类类New_case()&nbsp;中的plt.figure()之后加上</p> <p>plt.axes().get_xaxis().set_visible(False)<br />plt.axes().get_yaxis().set_visible(False)<span></span></p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2060.htm">旋转矩阵与欧拉角的相互转换</a></p>
                                                        <p>下一个：<a href="/html/category/article-2062.htm">win11系统UAC被禁用怎么解决</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4456.htm" title="宠物粮食批发市场在哪 宠物粮食批发市场在哪里">宠物粮食批发市场在哪 宠物粮食批发市场在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-2253.htm" title="最小删除以在C ++中制作有效的括号">最小删除以在C ++中制作有效的括号</a></li>
                        <li class="py-2"><a href="/html/category/article-4416.htm" title="办理动物诊疗许可证需要什么材料洛阳（动物诊疗许可证需要多少钱）">办理动物诊疗许可证需要什么材料洛阳（动物诊疗许可证需要多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-2233.htm" title="k8s 部署Redis集群">k8s 部署Redis集群</a></li>
                        <li class="py-2"><a href="/html/category/article-2227.htm" title="电脑无法装机怎么回事 电脑无法装系统怎么办">电脑无法装机怎么回事 电脑无法装系统怎么办</a></li>
                        <li class="py-2"><a href="/html/category/article-4493.htm" title="食材_鱼香肉丝最简单做法步骤窍门(鱼香肉丝的做法 最正宗的做法视频)">食材_鱼香肉丝最简单做法步骤窍门(鱼香肉丝的做法 最正宗的做法视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-3744.htm" title="SpringSecurity之OAuth2 令牌accessToken的生成过程">SpringSecurity之OAuth2 令牌accessToken的生成过程</a></li>
                        <li class="py-2"><a href="/html/category/article-2544.htm" title="C#开发Winform实现学生管理系统_C#教程">C#开发Winform实现学生管理系统_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-4529.htm" title="瑞鹏宠物医院在线咨询免费（瑞鹏宠物医院客服电话）">瑞鹏宠物医院在线咨询免费（瑞鹏宠物医院客服电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-4110.htm" title="SpringBoot之自定义Starter及AutoConfiguration">SpringBoot之自定义Starter及AutoConfiguration</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>