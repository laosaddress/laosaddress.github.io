<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2063.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>STL之vector - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>STL之vector</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="vector%E6%A6%82%E5%BF%B5-toc" style="margin-left:40px;">vector概念</p> <p id="vector%E7%9A%84%E9%81%8D%E5%8E%86-toc" style="margin-left:40px;">vector的遍历</p> <p id="1%E3%80%81%5B%20%5D%E7%9A%84%E9%87%8D%E8%BD%BD-toc" style="margin-left:80px;">1、[ ]的重载</p> <p id="2%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8-toc" style="margin-left:80px;">2、迭代器</p> <p id="3%E3%80%81%E8%8C%83%E5%9B%B4for-toc" style="margin-left:80px;">3、范围for</p> <p id="vector%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-toc" style="margin-left:0px;">vector的模拟实现</p> <p id="%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F-toc" style="margin-left:40px;">成员变量</p> <p id="reserve%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0-toc" style="margin-left:40px;">reserve函数与拷贝构造</p> <p id="%E5%A2%9E%E5%88%A0%E5%87%BD%E6%95%B0-toc" style="margin-left:40px;">增删函数</p> <p id="push_back-toc" style="margin-left:80px;">push_back</p> <p id="pop_back-toc" style="margin-left:80px;">pop_back</p> <p id="%E8%BF%AD%E4%BB%A3%E5%99%A8-toc" style="margin-left:40px;">迭代器</p> <p id="%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-toc" style="margin-left:40px;">运算符重载</p> <p id="%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6-toc" style="margin-left:80px;">赋值运算符</p> <p id="%5B%20%5D%E8%BF%90%E7%AE%97%E7%AC%A6-toc" style="margin-left:80px;">[ ]运算符</p> <p id="%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0-toc" style="margin-left:40px;">其他函数</p> <hr id="hr-toc"/> <p><img fetchpriority="high" decoding="async" alt="" height="203" src="http://img.555519.xyz/uploads3/20220722/b7efec10cd0fae79ce979dc3164d418a.jpg"></p> <h2 id="vector%E6%A6%82%E5%BF%B5">vector概念</h2> <p style="margin-left:0;">1、vector是表示<strong>可变大小数组</strong>的序列容器。</p> <p style="margin-left:0;">2、就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理。</p> <p style="margin-left:0;">3、本质讲，vector使用动态分配数组来存储它的元素。</p> <p style="margin-left:0px;text-align:justify;">4、vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为<strong>存储空间比实际需要的存储空间更大</strong>。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。</p> <h2 id="vector%E7%9A%84%E9%81%8D%E5%8E%86">vector的遍历</h2> <pre><code class="language-cpp">vector<int> v; v.push_back(1); v.push_back(2); v.push_back(3); v.push_back(4);</code></pre> <h3 id="1%E3%80%81%5B%20%5D%E7%9A%84%E9%87%8D%E8%BD%BD">1、[ ]的重载</h3> <pre><code class="language-cpp">for (size_t i = 0; i < v.size(); i++) { 	cout << v[i] << " "; }</code></pre> <h3 id="2%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8">2、迭代器</h3> <pre><code class="language-cpp">vector<int>::iterator it = v.begin(); while (it != v.end()) { 	cout << *it << " "; 	it++; } cout << endl;</code></pre> <h3 id="3%E3%80%81%E8%8C%83%E5%9B%B4for">3、范围for</h3> <pre><code class="language-cpp">for (auto& e : v) 	cout << e; cout << endl;</code></pre> <h1 id="vector%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">vector的模拟实现</h1> <p>vector是一个类模板，参考stl3.0的写法</p> <h2 id="%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">成员变量</h2> <p>库里面的写法</p> <p><img decoding="async" alt="" height="54" src="http://img.555519.xyz/uploads3/20220722/407b794e1e52de225bf765a0104d4b81.jpg"></p> <p>&nbsp;这里的iterator是被typdef了一下</p> <p><img decoding="async" alt="" height="205" src="http://img.555519.xyz/uploads3/20220722/3f0c0a3347089a86ec7bc9582dd4ade8.jpg"></p> <p>所以他的类型是 T*。传入int 就为int*，传入string就为string*。</p> <p>start用来标注数组的起点，finish用来标注数组有效长度的尾部，endofstorage标注数组的尾部。</p> <p>所以基本上的框架就是下面这样</p> <p><img loading="lazy" decoding="async" alt="" height="296" src="http://img.555519.xyz/uploads3/20220722/1ecdced8c79a03bc5ed15815e0be5bf4.jpg"></p> <pre><code class="language-cpp">template<class T> class myvector { public:     typedef T* iterator;     //--------构造函数---------     myvector() 	    :_start(nullptr) 	    ,_finish(nullptr) 	    ,_endofstorage(nullptr)     {}     ~myvector()     { 	    delete[] _start; 	    _start = nullptr; 	    _finish = nullptr; 	    _endofstorage = nullptr;     }  private: 	iterator _start; 	iterator _finish; 	iterator _endofstorage; };</code></pre> <h2 id="reserve%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0">reserve函数与拷贝构造</h2> <p>先谈谈reserve函数，因为插入元素首先是增容问题，自我感觉也是这个类的核心。</p> <p>先看一下下面的代码</p> <pre><code class="language-cpp">void reserve(size_t cap) { 	if (cap > capacity()) 	{ 		size_t len = size(); 		T* tmp = new T[cap]; 		if (_start)//防止为空的时候增容 		{ 			memcpy(tmp, _start, len * sizeof(T));//拷贝 			delete[] _start;//释放原来的空间 		} 		_start = tmp; 		_finish = _start + len; 		_endofstorage = _start + cap; 	} }</code></pre> <p>当大于实际容量时，才增容，否则不增容。增容的逻辑就是开辟一块新容量的空间，将之前的内容拷贝过来（如果没有之前相等），然后更改对应的三个指针。</p> <p>上面的代码表面看着没什么问题，其实存在一个很严重的bug，那就是<strong>浅拷贝。</strong></p> <p style="text-align:justify;">memcpy 将_start内容拷贝到tmp里面，如果是基本类型的数据，还不会出bug，如果是自定义类型，就有可能会出错。例如string类型，string类型里面有一个char*类型的指针，该指针指向了一块堆上的空间，如果只是单独的把_start的内容拷贝给tmp中，则一旦释放掉_start，会调用string的析构函数，则tmp里面的内容都被析构了，代码会崩溃。</p> <p style="text-align:justify;">正确的方法</p> <pre><code class="language-cpp">void reserve(size_t cap) { 	if (cap > capacity()) 	{ 		size_t len = size(); 		T* tmp = new T[cap]; 		if (_start) 		{ 			for (size_t i = 0; i < len; i++) 			{ 				tmp[i] = _start[i];//调用类型T自带的赋值完成深拷贝 			} 			delete[] _start; 		} 		_start = tmp; 		_finish = _start + len; 		_endofstorage = _start + cap; 	}</code></pre> <p><strong>拷贝构造</strong></p> <pre><code class="language-cpp">myvector(const myvector<T>& v)//深拷贝     :_start(nullptr)     ,_finish(nullptr)     ,_endofstorage(nullptr) { 	reserve(v.capacity()); 	for (size_t i = 0; i < v.size(); i++) 	{ 		*_finish = v[i]; 		_finish++; 	} }</code></pre> <h2 id="%E5%A2%9E%E5%88%A0%E5%87%BD%E6%95%B0">增删函数</h2> <h3 id="push_back">push_back</h3> <p>尾插，如果_finish == endofstorage，则需要增容，注意刚开始为为空时的情况。</p> <pre><code class="language-cpp">void push_back(const T& x) { 	if (_finish == _endofstorage) 	{ 		size_t newcapacity = capacity() == 0 ? 2 : capacity() * 2; 		reserve(newcapacity); 	} 	*_finish = x; 	_finish++; }</code></pre> <h3 id="pop_back">pop_back</h3> <p>尾删，在入口处判断是否合法，即_start<_finish。</p> <pre><code class="language-cpp">void pop_back() { 	assert(_start < _finish);//首先得判断是否为空数组 	_finish--; }</code></pre> <h2 id="%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</h2> <p>vector的迭代器也比较简单，和string的类似。</p> <pre><code class="language-cpp">iterator begin() { 	return _start; } iterator end() { 	return _finish; } const_iterator begin() const//const迭代器 typedef const T* const_iterator; { 	return _start; } const_iterator end() const { 	return _finish; }</code></pre> <h2 id="%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD">运算符重载</h2> <h3 id="%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">赋值运算符</h3> <pre><code class="language-cpp">const myvector<T>& operator=(const myvector<T>& v) { 	delete[] _start; 	_start = nullptr; 	_finish = nullptr; 	_endofstorage = nullptr;//先清除之前的内容，然后记得置空，不然重新开辟空间会出错 	reserve(v.capacity()); 	for (size_t i = 0; i < v.size(); i++) 	{ 		*_finish = v[i]; 		_finish++; 	} 	return *this; }</code></pre> <p>现代写法思路一样，用swap函数，利用临时对象的特性，交换空间</p> <pre><code class="language-cpp">void swap(myvector<T>& v) { 	std::swap(_start, v._start); 	std::swap(_finish, v._finish); 	std::swap(_endofstorage, v._endofstorage); }  myvector<T>& operator=(myvector<T> v) { 	swap(v); 	return *this; }</code></pre> <h3 id="%5B%20%5D%E8%BF%90%E7%AE%97%E7%AC%A6">[ ]运算符</h3> <pre><code class="language-cpp">T& operator[](size_t i) { 	assert(i < size()); 	return _start[i]; } const T& operator[](size_t i)const { 	assert(i < size()); 	return _start[i]; }</code></pre> <h2 id="%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">其他函数</h2> <pre><code class="language-cpp">size_t size()const//获取大小 { 	return _finish - _start; } size_t capacity()const//获取容量 { 	return _endofstorage - _start; } void resize(size_t n, const T& val = T())//修改size的大小，分情况 { 	if (n < size()) 	{ 		_finish -= size()-n; 	} 	else  	{	 		if (n > capacity()) 		{ 			reserve(n); 		} 		size_t tmp = n - size(); 		while (tmp) 		{ 			*_finish = val; 			_finish++; 			tmp--; 		} 	} }</code></pre> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2062.htm">win11系统UAC被禁用怎么解决</a></p>
                                                        <p>下一个：<a href="/html/category/article-2064.htm">vue+Element实现登录随机验证码_vue.js_</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6675.htm" title="宠物食品加工流程 宠物食品加工流程图">宠物食品加工流程 宠物食品加工流程图</a></li>
                        <li class="py-2"><a href="/html/category/article-7180.htm" title="宠物打疫苗会有什么副作用（宠物打疫苗的不良反应）">宠物打疫苗会有什么副作用（宠物打疫苗的不良反应）</a></li>
                        <li class="py-2"><a href="/html/category/article-6674.htm" title="佳雯宠物医院有限公司招聘（佳雯宠物医院有限公司招聘信息）">佳雯宠物医院有限公司招聘（佳雯宠物医院有限公司招聘信息）</a></li>
                        <li class="py-2"><a href="/html/category/article-6720.htm" title="宠物店一年的利润多少（小宠物店每个月利润）">宠物店一年的利润多少（小宠物店每个月利润）</a></li>
                        <li class="py-2"><a href="/html/category/article-6118.htm" title="汽车投诉最多的什么车(汽车投诉最少排行榜)">汽车投诉最多的什么车(汽车投诉最少排行榜)</a></li>
                        <li class="py-2"><a href="/html/category/article-7411.htm" title="领养宠物要钱吗现在（领养宠物麻烦吗）">领养宠物要钱吗现在（领养宠物麻烦吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6721.htm" title="歌曲人世间表达了什么（奔走相告）歌曲人世间原唱雷佳，叶问3演员表，坐88路车回家 电视剧，">歌曲人世间表达了什么（奔走相告）歌曲人世间原唱雷佳，叶问3演员表，坐88路车回家 电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7779.htm" title="宠物粮厂家（宠物粮厂家排名）">宠物粮厂家（宠物粮厂家排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7088.htm" title="克拉霉素缓释片哪个厂家效果好(克拉霉素片什么厂家好)">克拉霉素缓释片哪个厂家效果好(克拉霉素片什么厂家好)</a></li>
                        <li class="py-2"><a href="/html/category/article-7226.htm" title="tvb历年搞笑剧（风之刀剧情）深度揭秘，">tvb历年搞笑剧（风之刀剧情）深度揭秘，</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>