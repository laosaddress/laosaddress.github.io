<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2015.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>为什么重写equals一定要重写hashcode - Laos Address</title>
        <link rel="icon" href="/assets/website/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/website/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/website/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/website/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/website/css/laosaddress/custom.css">
    <link rel="stylesheet" href="/assets/website/css/style.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>为什么重写equals一定要重写hashcode</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><strong>在原始的Object类中</strong></p> <p>默认equals比较规则是通过“==”来进行判断，这样比较的是两个对象的<strong>内存地址</strong>，默认的hashcode方法返回的是<strong>对象的内存地址由哈希算法转换成的一个整数</strong>，实际上指的的也是内存。哈希算法具有一定的偶然性，不同的内存地址可能计算出相同的哈希值。</p> <p>对于原始的hashCode()和equals() 方法来说，通过equals() 比较两个对象相等，说明这两个对象的内存地址相同，进而知hashcode也是相同的。 </p> <p><strong>在实际使用中，大多数场景下，如HashMap中存放自定义对象类作为key</strong></p> <p>当用 HashMap 存入自定义的类时，如果不重写这个自定义类的 equals 和 hashCode 方法，得到的结果会和预期的不一样。</p> <p>举例，定义一个 HashMapKey.java 的类，只有一个属性 id ：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapKey</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>测试类如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHashMap</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">HashMapKey</span> k1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">HashMapKey</span> k2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">HashMapKey</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation"><</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> <span class="token string">"程序猿杂货铺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map.get(k2) : "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>定义了两个 HashMapKey 对象，id 都是 1，创建一个 HashMap 对象，通过 put 方法把 k1 和一串字符放入到 map里，最后用 k2 去从 HashMaP里得到值，因为 k1 和 k2 值是一样的，理论上我们是可以用这个键获取到对应的值的，看似符合逻辑，实则不然，它的执行结是：<code>map.get(k2) : null</code>。出现这个情况的原因有两个：</p> <ul> <li>没有重写 hashCode 方法</li> <li>没有重写 equals 方法。</li> </ul> <p><strong>存的是k1，但是要通过k2去取，问题本质是判断两个对象是否相同</strong></p> <p>当往 HashMap 里放 k1 时，首先会调用 HashMapKey 这个类的 hashCode 方法计算它的 hash 值，随后把 k1 放入 hash 值所指引的内存位置</p> <p>但是在 HashMapKey 中没有重写 hashCode 方法，所以这里调用的是顶级父类Object 类的 hashCode 方法，而 Object 类的 hashCode 方法返回的 hash 值其实是 k1 对象的内存地址（假设是 0x100）。</p> <p>如果是调用 map.get(k1)查询map，那么接下来还是会再次调用Object的hashCode 方法（还是返回 k1 的地址 0x100），随后根据得到的 hash 值，能很快地找到 k1。</p> <p>但通过map.get(k2)查询map时，还是会调用Object类的 hashCode方法计算 k2 的 hash值，得到的是 k2 的内存地址（假设是 0x200）。由于 k1 和 k2 是new出来的两个不同的对象，具有不同的内存地址空间，也就是说它们的 hash 值一定不同。所以通过k2是无法得到k1</p> <p>???? 到达此处说明<br /><strong>hashcode不同，两个对象一定不同</strong></p> <p>当重写 hashCode 方法后</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>    <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>此时因为 hashCode 方法返回的是 id 的 hash值，所以此处 k1 和 k2 这两个对象的 hash 值就变得相等了。</p> <p>存 k1 时，是根据它 id 的 hash 值，假设这里是 103，把 k1 对象放入到对应的位置。而通过 k2 取时，是先计算它的 hash 值，由于 k2 的 id 也是 1，这个值也是 103，随后到这个位置去找。按道理应该可以找到。但运行结果还是会出乎意料：<code>map.get(k2) : null</code>。</p> <p>HashMap 是用链地址法来处理冲突，也就是说，在 103号位置上，有可能存在着多个用链表形式存储的对象。它们通过 hashCode 方法返回的 hash 值都是 103。<br /> <img decoding="async" src="http://img.555519.xyz/uploads/20230108/1baab0c36a308d30a87c1dcd14a48e61.jpg" alt="为什么重写equals一定要重写hashcode"></p> <p>当通过 k2 的 hashCode 到 103号位置查找时，确实会得到 k1。但 k1 有可能仅仅是和 k2 具有相同的 hash值，但未必和 k2 相等。</p> <p>???? 到达此处说明<br /><strong>hashcode相同，两个对象也不一定不同</strong><br /><strong>两个对象不同，hashcode不一定不等</strong></p> <p>判断完hashcode相同后，这个时候就需要调用 HashMapKey 对象的 equals 方法来判断两者是否相等了。 </p> <p>由于在 HashMapKey 对象里没有定义 equals 方法，系统就不得不调用 Object 类的 equals 方法，由于 Object 的原生equals方法是根据两个对象的内存地址来判断，而k1和k2是new出来的两个对象具有不同的内存空间，所以 k1 和 k2 一定不会相等，</p> <p>这就是为什么通过 map.get(k2) 依然得到 null 的原因。</p> <p>当继续重写 equals 方法后</p> <p>在这个方法里，只要两个对象都是 Key 类型，而且它们的 id 相等，它们就相等。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HashMapKey</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p>至此over</p> <p>???? 判断两个对象是否相同<br /> 先求出hashcode()，比较其值是否相等；<br /> 若相等；<br /> 再比较equals()；<br /> 若相等；<br /> 则认为他们是相等的。若equals()不相等则认为他们不相等。</p> <p> 两个对象相等，hashcode一定相等</p> <p>⚠️ <strong>如果你需要要在 HashMap 的“键”部分存放自定义的对象，一定要重写 equals 和 hashCode 方法。</strong></p> <blockquote> <p>参考<br />https://zhuanlan.zhihu.com/p/61307537</p> </blockquote> <p><strong>如果只重写了equals不重写hashcode呢</strong> </p> <p>在Object类中，equals方法默认使用“==”号来对两个对象进行判断，比较的是地址</p> <blockquote> <p>这种判断方式本质上没错，但是不太符合实际需求，就好比在两个不同的超市里面都有矿泉水，但是因为地址值不同，在使用equals做判断时，这两个超市的矿泉水就会返回为false；因此在实际开发中我们往往需要重写Object的equals方法。</p> </blockquote> <p>在Object类中，hashCode方法根据当前对象地址返回一个整型的hash值。哈希算法具有偶然性，相同对象地址返回hash值一定是一样，不同对象地址返回hash值也可能一样。</p> <p>在java底层集合框架中，为了提高查询效率，往往使用hashCode方法来确定元素的保存位置。 </p> <p>定义一个Sudent类只重写了Object的equals方法，没有重写hashCode方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/7c085e4948ca55d711bed1e82fef126c.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 测试<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/eb009f8f7b210433296599afd311291d.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 输出<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/fb9d152bac9b93eda7ce4b70dcb95d18.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 按照我们的常规理解，只要两个学生对象的id和name是一样的，我们就可以认为这两个学生对象指的是同一个人，因此重写了equals方法，让Student对象只要name和id相同就返回true，而且并没有重写hashCode方法。</p> <p>在测试中，新建了两个Student对象，并且让他们的id和name完全一样，在调用equals方法时，返回为true，说明这两个对象时相等的。但是由于没有重写hashCode方法，所以这两个对象调用的hashCode还是Object类那里的hashCode方法，并且他们的值并不相等。</p> <p>由此可以得出结论：重写了equals方法，不重写hashCode方法时，可能会出现equals方法返回为true，而hashCode方法却返回不同的结果。</p> <p><strong>那么这样会有什么影响呢？</strong></p> <p> 在java底层的集合框架中（如HashMap，HashSet等），为了提高查询的效率，在确定某个对象的存储位置时，往往需要通过调用对象的hashCode方法来实现。</p> <p>例如在上例中，我们把新建出来的两个Student对象放入HashSet集合中：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/1172da91293d38c57e81087d3e639e9d.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 按照我们主观理解，这两个对象equals为true，那么HashSet应该主动帮我们去重，最终的HashSet中应该只保留1个对象，即最终输出的HashSet的size为1，但是我们得到的结果却是2：</p> <p>是因为HashSet的底层其实就是HashMap，当存放对象时，先调用这个对象的hashCode方法计算存放位置。由于student没有重写hashCode方法，所以使用的是Object类的hashcode方法，所以存放的位置在底层数组上是不一样的，不会触发HashSet的去重功能，而对于程序员来说，两个相同的对象却会在HashSet中出现多次。</p> <blockquote> <p>参考<br />https://zhuanlan.zhihu.com/p/102248677</p> </blockquote> <p>重写了equals和hashcode后<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/daed8caec1ca8a0c0a39a3556efb5b88.jpg" alt="为什么重写equals一定要重写hashcode"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/0752354e184083f42a3464d22f19503c.jpg" alt="为什么重写equals一定要重写hashcode"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/d08a972e7357ed03ccd000ae5e205d74.jpg" alt="为什么重写equals一定要重写hashcode"></p> <p><strong>???? 总结</strong></p> <p>根据面向对象思想，只要值相同，就为相同两个对象</p> <p>所以重写equals比较值。出现“equals相等，但是hashcode不等”</p> <p>在实际使用时，比如在集合HashMap HashSet中，先去计算hashcode，若相等再去比较equals</p> <p>若hashcode不同，则认为是不同的对象，无需再去比较equals</p> <p>所以重写了equals，必须要重写hashcode</p> <p></p> <p>个人博客：wgzz.top<br /> 个人公众号：<strong>程序员WeiG</strong><br /> 欢迎关注????</p> </p></div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2014.htm">centos7-linux安装docker(离线方式)</a></p>
                                                        <p>下一个：<a href="/html/category/article-2016.htm">java实现机械表</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    
<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-10401.htm" title="十大狗粮品牌排行榜（排名前十的狗粮品牌）">十大狗粮品牌排行榜（排名前十的狗粮品牌）</a></li>
                        <li class="py-2"><a href="/html/category/article-10446.htm" title="动物防疫疫苗管理工作方案怎么写的（动物防疫方针）">动物防疫疫苗管理工作方案怎么写的（动物防疫方针）</a></li>
                        <li class="py-2"><a href="/html/category/article-9894.htm" title="玉溪旅游攻略一日游最佳景点(玉溪旅游攻略必去景点推荐)">玉溪旅游攻略一日游最佳景点(玉溪旅游攻略必去景点推荐)</a></li>
                        <li class="py-2"><a href="/html/category/article-10492.htm" title="成都宠物领养基地在哪里预约（成都宠物犬领养）">成都宠物领养基地在哪里预约（成都宠物犬领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-9573.htm" title="被宠物猫抓出血了严重吗（被宠物猫抓出血了严重吗图片）">被宠物猫抓出血了严重吗（被宠物猫抓出血了严重吗图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-10676.htm" title="领养狗什么意思（领养狗的意思）">领养狗什么意思（领养狗的意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-10538.htm" title="三国杀出场台词（三国杀局内台词）">三国杀出场台词（三国杀局内台词）</a></li>
                        <li class="py-2"><a href="/html/category/article-10309.htm" title="宠物猫疫苗要多少钱一针（宠物猫疫苗要多少钱一针呢）">宠物猫疫苗要多少钱一针（宠物猫疫苗要多少钱一针呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-10308.htm" title="红烧肉怎么会有苦味(红烧肉怎么会发苦)">红烧肉怎么会有苦味(红烧肉怎么会发苦)</a></li>
                        <li class="py-2"><a href="/html/category/article-10354.htm" title="猫三联三针隔多久打第二针（猫三联三针隔多久打第二针好）">猫三联三针隔多久打第二针（猫三联三针隔多久打第二针好）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/website/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/website/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/website/js/frontend/laosaddress/front.js"></script>
</body>

</html>