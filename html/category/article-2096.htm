<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2096.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Metalama简介3.自定义.NET项目中的代码分析 - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>Metalama简介3.自定义.NET项目中的代码分析</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<p>本系列其它文章</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/chsword/p/dotnet_compile_aop_base_roslyn.html"  target="_blank" rel="nofollow">使用基于Roslyn的编译时AOP框架来解决.NET项目的代码复用问题</a><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/chsword/p/metalama_1.html"  target="_blank" rel="nofollow">Metalama简介1. 不止是一个.NET跨平台的编译时AOP框架</a><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/chsword/p/metalama_2.html"  target="_blank" rel="nofollow">Metalama简介2.利用Aspect在编译时进行消除重复代码</a></p> <h1 id="代码分析">代码分析</h1> <p>这里所说的代码分析，是可以通过一些自定义的方法，在使用不符合条件的代码时产生错误或警告。<br /> 如果配合CI并在每次持续集成时，都向团队分发警告和错误。团队也在开发时遵守谁产生的警告，谁解决的团队约定，那么团队将不断减少技术债务，这样可以避免架构持续性的腐坏。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a38fedc7243991cd29dbe1f6e33e5e8f.jpg" alt="Metalama简介3.自定义.NET项目中的代码分析"></p> <p>当然<code>.NET</code>自身及一些三方工具如<code>Resharper</code>已经提供了很多的代码分析功能，包括但不限于命名、代码调用等。但是有时想要更近一步地为团队增加更加定制化地代码分析，却没有对应的办法。</p> <p><code>Metalama</code>中也提供了代码分析功能。</p> <p>下面我们以几个示例来演示<code>Metalama</code>中如何使用代码分析。</p> <h1 id="通用自定义代码分析示例logger">通用自定义代码分析示例Logger</h1> <p>（源码见最后）<br /> 以我们最初的Log示例为例，假设我们当前要引入<code>ILogger</code>来记录日志，来替换当前的<code>Console.WriteLine</code>。</p> <pre><code class="language-C#">interface ILogger {     void Info(string message); } public class ConsoleLogger : ILogger {     public void Info(string message)     {         Console.WriteLine(message);     } }</code></pre> <p>那么<code>Program</code>也要做出修改。</p> <pre><code class="language-C#">class Program {     ILogger _logger = new ConsoleLogger();     public static void Main(string[] args)     {         var r = new Program().Add(1, 2);         Console.WriteLine(r);     }     // 在这个方法中使用了下面的Attribute     [LogAttribute]     private int Add(int a, int b)     {         var result = a + b;         return result;     } }</code></pre> <p>而<code>LogAttribute</code>也要进行修改。</p> <pre><code class="language-C#">public class LogAttribute : OverrideMethodAspect {     public override dynamic? OverrideMethod()     {         meta.This._logger.Info(meta.Target.Method.ToDisplayString() + " 开始运行.");         var result = meta.Proceed();         meta.This._logger.Info(meta.Target.Method.ToDisplayString() + " 结束运行.");         return result;     } }</code></pre> <p>接下来我们可以为<code>LogAttribute</code>添加代码分析，要求<code>LogAttribute</code>的方法的所在的类上，必须有<code>_logger</code>且类型必须为<code>ILogger</code>。</p> <pre><code class="language-C#">public class LogAttribute : OverrideMethodAspect {     static DiagnosticDefinition&lt;(INamedType DeclaringType, IMethod Method)&gt; _loggerFieldNotFoundError = new(     "DEMO01",     Severity.Error,     "类型'{0}'必须包含ILogger类型的字段 '_logger'因为使用了[Log]Aspect在'{1}'上.");      // Entry point of the aspect.     public override void BuildAspect(IAspectBuilder&lt;IMethod&gt; builder)     {         // 此处必须调用，否则目标方法将不会被覆盖，因为这里Override与BuildAspect共同使用了         base.BuildAspect(builder);          // 验证字段         var loggerField = builder.Target.DeclaringType.Fields.OfName("_logger").SingleOrDefault();         if (loggerField == null || !loggerField.Type.Is(typeof(ILogger)) || loggerField.IsStatic)         {             // 报告异常             builder.Diagnostics.Report(_loggerFieldNotFoundError.WithArguments((builder.Target.DeclaringType, builder.Target)), builder.Target.DeclaringType);             // 不执行Aspect             builder.SkipAspect();             return;         }     }     public override dynamic? OverrideMethod()     {         meta.This._logger.Info(meta.Target.Method.ToDisplayString() + " 开始运行.");         var result = meta.Proceed();         meta.This._logger.Info(meta.Target.Method.ToDisplayString() + " 结束运行.");         return result;     } }</code></pre> <p>这样当我们代码中有错误，将会触发提示。</p> <p>如果没有<code>_logger</code> 或<code>_logger</code>类型不对或为<code>static</code>时则有以下提示<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/59b206e79dd81b471be938350c3dfa15.jpg" alt="Metalama简介3.自定义.NET项目中的代码分析"></p> <p>同时也可以在<code>Aspect</code>中定义<code>Eligibility</code>,在编译时检查<code>Aspect</code>作用的目标是否符合要求。<br /> 下面的代码加到<code>LogAttribute</code>就会检查<code>Add</code>方法是否为非<code>static</code>。</p> <pre><code class="language-C#">    public override void BuildEligibility( IEligibilityBuilder&lt;IMethod&gt; builder )     {         base.BuildEligibility( builder );         builder.MustBeNonStatic();     }</code></pre> <p>此时若将<code>Add</code>修改为<code>static</code>则会提示</p> <pre><code>error LAMA0037: The aspect 'Log' cannot be applied to 'Program.Add(int, int)' because 'Program.Add(int, int)' must be non-static.</code></pre> <h1 id="自定义一个代码分析要求当前方法只能在符合规则的命名空间中使用">自定义一个代码分析：要求当前方法只能在符合规则的命名空间中使用</h1> <p>当一个团队存在多个项目时，我们会约定这里的某些项目的命名必须符合某一规则。<br /> 例如，当我们构建一个微服务项目时，我们会要求所有的数据库调用，都发生在指定的命名空间中。<br /> 此时我们可以使用一个自定义的<code>Aspect</code>构造一个方法的代码验证规则。</p> <p><strong>下面这个示例是要求调用函数的命名空间必须符合以<code>.Tests</code>结尾的规则，否则给出警告</strong></p> <pre><code class="language-C#">using Metalama.Framework.Aspects; using Metalama.Framework.Code; using Metalama.Framework.Diagnostics; using Metalama.Framework.Validation; namespace LogWithWarning {     class ForTestOnlyAttribute : Aspect, IAspect&lt;IDeclaration&gt;     {         private static readonly DiagnosticDefinition&lt;IDeclaration&gt; _warning = new(             "DEMO02",             Severity.Warning,             "'{0}' 只能在一个以 '.Tests'结尾的命名空间中使用");          public void BuildAspect(IAspectBuilder&lt;IDeclaration&gt; builder)         {             builder.WithTarget().RegisterReferenceValidator(this.ValidateReference, ReferenceKinds.All);         }          private void ValidateReference(in ReferenceValidationContext context)         {             if (!context.ReferencingType.Namespace.FullName.EndsWith(".Tests"))             {                 context.Diagnostics.Report(_warning.WithArguments(context.ReferencedDeclaration));             }         }     } }</code></pre> <p>此时当我们在非<code>.Tests</code>结尾的命名空间中调用时。<br /> 则会发生如下提示。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a38fedc7243991cd29dbe1f6e33e5e8f.jpg" alt="Metalama简介3.自定义.NET项目中的代码分析"></p> <h1 id="引用">引用</h1> <ul> <li>本章源代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/chsword/metalama-demo/tree/main/src/LogWithWarning"  target="_blank" rel="nofollow">https://github.com/chsword/metalama-demo/tree/main/src/LogWithWarning</a></li> <li>Metalama官方文档:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://doc.metalama.net/"  target="_blank" rel="nofollow">https://doc.metalama.net/</a></li> <li>Metalama Nuget包:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.nuget.org/packages/Metalama.Framework/0.5.8-preview"  target="_blank" rel="nofollow">https://www.nuget.org/packages/Metalama.Framework/0.5.8-preview</a></li> </ul> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2095.htm">阿里云IoT流转到postgresql数据库方案_在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-2097.htm">CSS &#8211; 隐藏浏览器自带滚动条（Chrome | Safari | Firefox | IE | Edge）</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2235.htm" title="JavaScript 编写猜拳游戏">JavaScript 编写猜拳游戏</a></li>
                        <li class="py-2"><a href="/html/category/article-2230.htm" title="当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？">当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2205.htm" title="PHP如何通过引用传递">PHP如何通过引用传递</a></li>
                        <li class="py-2"><a href="/html/category/article-2206.htm" title="c++语法拾遗，一些细节与特性">c++语法拾遗，一些细节与特性</a></li>
                        <li class="py-2"><a href="/html/category/article-2837.htm" title="i2c调试工具分享">i2c调试工具分享</a></li>
                        <li class="py-2"><a href="/html/category/article-2190.htm" title="PHP声明语句">PHP声明语句</a></li>
                        <li class="py-2"><a href="/html/category/article-2211.htm" title="再谈JavaScript中bind、call、apply三个方法的区别与使用方式_javascript技巧">再谈JavaScript中bind、call、apply三个方法的区别与使用方式_javascript技巧</a></li>
                        <li class="py-2"><a href="/html/category/article-2219.htm" title="使用VS  新建C++项目">使用VS  新建C++项目</a></li>
                        <li class="py-2"><a href="/html/category/article-2209.htm" title="Feign客户端的使用方法详解">Feign客户端的使用方法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3437.htm" title="vue如何实现关闭对话框后刷新列表_vue.js">vue如何实现关闭对话框后刷新列表_vue.js</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>