<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2044.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>为什么HttpContextAccessor要这么设计? - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>为什么HttpContextAccessor要这么设计?</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<h2 id="前言">前言</h2> <p>周五在群里面有小伙伴问，ASP.NET Core这个<code>HttpContextAccessor</code>为什么改成了这个样子？<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dc65ab8bab6281c6a427d17e642ffadc.jpg" alt="为什么HttpContextAccessor要这么设计?"><br /> 在印象中，这已经是第三次遇到有小伙伴问这个问题了，特意来写一篇记录，来回答一下这个问题。</p> <h2 id="聊一聊历史">聊一聊历史</h2> <p>关于<code>HttpContext</code>其实我们大家都不陌生，它封装了<code>HttpRequest</code>和<code>HttpResponse</code>，在处理Http请求时，起着至关重要的作用。</p> <h3 id="callcontext时代">CallContext时代</h3> <p>那么如何访问<code>HttpContext</code>对象呢？回到<code>await/async</code>出现以前的ASP.NET的时代，我们可以通过<code>HttpContext.Current</code>方法直接访问当前Http请求的<code>HttpContext</code>对象，因为当时基本都是同步的代码，一个Http请求只会在一个线程中处理，所以我们可以使用能在当前线程中传播的<code>CallContext.HostContext</code>来保存<code>HttpContext</code>对象，它的代码长这个样子。</p> <pre><code class="language-C#">namespace System.Web.Hosting {       using System.Web;     using System.Web.Configuration;     using System.Runtime.Remoting.Messaging;     using System.Security.Permissions;          internal class ContextBase {           internal static Object Current {             get {                 // CallContext在不同的线程中不一样                 return CallContext.HostContext;             }               [SecurityPermission(SecurityAction.Demand, Unrestricted = true)]             set {                 CallContext.HostContext = value;             }         }         ......     } }}</code></pre> <p>一切都很美好，但是后面微软在C#为了进一步增强增强了异步IO的性能，从而实现的stackless协程，加入了<code>await/async</code>关键字（感兴趣的小伙伴可以阅读黑洞的这一系列文章），同一个方法内的代码<code>await</code>前与后不一定在同一个线程中执行，那么就会造成在<code>await</code>之后的代码使用<code>HttpContext.Current</code>的时候访问不到当前的<code>HttpContext</code>对象，下面有一段这个问题简单的复现代码。</p> <pre><code class="language-C#">// 设置当前线程HostContext CallContext.HostContext = new Dictionary<string, string>  { 	["ContextKey"] = "ContextValue" }; // await前，可以正常访问 Console.Write($"[{Thread.CurrentThread.ManagedThreadId}] await before："); Console.WriteLine(((Dictionary<string,string>)CallContext.HostContext)["ContextKey"]);  await Task.Delay(100);  // await后，切换了线程，无法访问 Console.Write($"[{Thread.CurrentThread.ManagedThreadId}] await after："); Console.WriteLine(((Dictionary<string,string>)CallContext.HostContext)["ContextKey"]);</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a1a124c0ff288fbdd76a5a2c6b11b45f.jpg" alt="为什么HttpContextAccessor要这么设计?"><br /> 可以看到await执行之前HostContext是可以正确的输出赋值的对象和数据，但是await以后的代码由于线程从<code>16</code>切换到<code>29</code>，所以访问不到上面代码给HostContext设置的对象了。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f8452fab12498991a917b017532675a9.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <h3 id="asynclocal时代">AsyncLocal时代</h3> <p>为了解决这个问题，微软在.NET 4.6中引入了<code>AsyncLocal<T></code>类，后面重新设计的ASP.NET Core自然就用上了<code>AsyncLocal<T></code>来存储当前Http请求的HttpContext对象，也就是开头截图的代码一样，我们来尝试一下。</p> <pre><code class="language-C#">var asyncLocal = new AsyncLocal<Dictionary<string,string>>();  // 设置当前线程HostContext asyncLocal.Value = new Dictionary<string, string>  { 	["ContextKey"] = "ContextValue" }; // await前，可以正常访问 Console.Write($"[{Thread.CurrentThread.ManagedThreadId}] await before："); Console.WriteLine(asyncLocal.Value["ContextKey"]);  await Task.Delay(100);  // await后，切换了线程，可以访问 Console.Write($"[{Thread.CurrentThread.ManagedThreadId}] await after："); Console.WriteLine(asyncLocal.Value["ContextKey"]);</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a07bd05122f258c9ad9aaae629db521b.jpg" alt="为什么HttpContextAccessor要这么设计?"><br /> 没有任何问题，线程从16切换到了17，一样的可以访问。对AsyncLocal感兴趣的小伙伴可以看黑洞的这篇文章。简单的说就是AsyncLocal默认会将当前线程保存的上下对象在发生await的时候传播到后续的线程上。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/910f53e6fd31dea44da87d6c1b2217be.jpg" alt="为什么HttpContextAccessor要这么设计?"><br /> 这看起来就非常的美好了，既能开开心心的用<code>await/async</code>又不用担心上下文数据访问不到，那为什么ASP.NET Core的后续版本需要修改<code>HttpContextAccesor</code>呢？我们自己来实现ContextAccessor，大家看下面一段代码。</p> <pre><code class="language-C#">// 给Context赋值一下 var accessor = new ContextAccessor(); accessor.Context =  "ContextValue"; Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Main-1：{accessor.Context}");  // 执行方法 await Method();  // 再打印一下 Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Main-2：{accessor.Context}");  async Task Method() { 	// 输出Context内容 	Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Method-1：{accessor.Context}"); 	await Task.Delay(100); 	// 注意！！！，我在这里将Context对象清空 	Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Method-2：{accessor.Context}"); 	accessor.Context = null; 	Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Method-3：{accessor.Context}"); }  // 实现一个简单的Context Accessor public class ContextAccessor { 	static AsyncLocal<string> _contextCurrent = new AsyncLocal<string>();  	public string Context 	{ 		get => _contextCurrent.Value; 		set => _contextCurrent.Value = value; 	} }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/eefc3cab5a3c1ddcb275d7f23dc3acd4.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <p>奇怪的事情就发生了，为什么明明在Method中把Context对象置为null了，<code>Method-3</code>中已经输出为null了，为啥在<code>Main-2</code>输出中还是ContextValue呢？<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f8efde399c032fed0b81ab5101efa8f7.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <h3 id="asynclocal使用的问题">AsyncLocal使用的问题</h3> <p><strong>其实这已经解答了上面的问题，就是为什么在ASP.NET Core 6.0中的实现方式突然变了</strong>，有这样一种场景，已经当前线程中把HttpContext置空了，但是其它线程仍然能访问HttpContext对象，导致后续的行为可能不一致。</p> <p>那为什么会造成这个问题呢？首先我们得知道<code>AsyncLocal</code>是如何实现的，这里我就不在赘述，详细可以看我前面给的链接（黑洞大佬的文章）。这里只简单的说一下，我们只需要知道<code>AsyncLocal</code>底层是通过<code>ExecutionContext</code>实现的，每次设置Value时都会用新的Context对象来覆盖原有的，代码如下所示(有删减)。</p> <pre><code class="language-C#">public sealed class AsyncLocal<T> : IAsyncLocal {     public T Value     {         [SecuritySafeCritical]         get         {             // 从ExecutionContext中获取当前线程的值             object obj = ExecutionContext.GetLocalValue(this);             return (obj == null) ? default(T) : (T)obj;         }         [SecuritySafeCritical]         set         {             // 设置值              ExecutionContext.SetLocalValue(this, value, m_valueChangedHandler != null);         }     } }  ...... public sealed class ExecutionContext : IDisposable, ISerializable { 	internal static void SetLocalValue(IAsyncLocal local, object newValue, bool needChangeNotifications) 	{ 		var current = Thread.CurrentThread.GetMutableExecutionContext();  		object previousValue = null;  		if (previousValue == newValue) 			return;  		var newValues = current._localValues;         // 无论是AsyncLocalValueMap.Create 还是 newValues.Set          // 都会创建一个新的IAsyncLocalValueMap对象来覆盖原来的值 		if (newValues == null) 		{ 			newValues = AsyncLocalValueMap.Create(local, newValue, treatNullValueAsNonexistent: !needChangeNotifications); 		} 		else 		{ 			newValues = newValues.Set(local, newValue, treatNullValueAsNonexistent: !needChangeNotifications); 		} 		current._localValues = newValues;         ...... 	} }</code></pre> <p>接下来我们需要避开<code>await/async</code>语法糖的影响，反编译一下IL代码，使用C# 1.0来重新组织代码(使用ilspy或者dnspy之类都可以)。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d7dc9dd0fae175ada9e7562821a80320.jpg" alt="为什么HttpContextAccessor要这么设计?"><br /> 可以看到原本的语法糖已经被拆解成stackless状态机，这里我们重点关注<code>Start</code>方法。进入<code>Start</code>方法内部，我们可以看到以下代码，源码链接。</p> <pre><code class="language-C#">...... // Start方法 public static void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine {     if (stateMachine == null)     {         ThrowHelper.ThrowArgumentNullException(ExceptionArgument.stateMachine);     }      Thread currentThread = Thread.CurrentThread;     // 备份当前线程的 executionContext     ExecutionContext? previousExecutionCtx = currentThread._executionContext;     SynchronizationContext? previousSyncCtx = currentThread._synchronizationContext;      try     {         // 执行状态机         stateMachine.MoveNext();     }     finally     {         if (previousSyncCtx != currentThread._synchronizationContext)         {             // Restore changed SynchronizationContext back to previous             currentThread._synchronizationContext = previousSyncCtx;         }          ExecutionContext? currentExecutionCtx = currentThread._executionContext;         // 如果executionContext发生变化，那么调用RestoreChangedContextToThread方法还原         if (previousExecutionCtx != currentExecutionCtx)         {             ExecutionContext.RestoreChangedContextToThread(currentThread, previousExecutionCtx, currentExecutionCtx);         }     } } ...... // 调用RestoreChangedContextToThread方法 internal static void RestoreChangedContextToThread(Thread currentThread, ExecutionContext? contextToRestore, ExecutionContext? currentContext) {     Debug.Assert(currentThread == Thread.CurrentThread);     Debug.Assert(contextToRestore != currentContext);      // 将改变后的ExecutionContext恢复到之前的状态     currentThread._executionContext = contextToRestore;     ...... }</code></pre> <p>通过上面的代码我们就不难看出，为什么会存在这样的问题了，是因为状态机的<code>Start</code>方法会备份当前线程的<code>ExecuteContext</code>，如果<code>ExecuteContext</code>在状态机内方法调用时发生了改变，那么就会<strong>还原</strong>回去。<br /> 又因为上文提到的<code>AsyncLocal</code>底层实现是<code>ExecuteContext</code>，每次SetValue时都会生成一个新的<code>IAsyncLocalValueMap</code>对象覆盖当前的<code>ExecuteContext</code>，必然修改就会被<strong>还原</strong>回去了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4fbf4c48c8055adfd67f3ecca7dc2d7a.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <h3 id="aspnet-core的解决方案">ASP.NET Core的解决方案</h3> <p>在ASP.NET Core中，解决这个问题的方法也很巧妙，就是简单的包了一层。我们也可以简单的包一层对象。</p> <pre><code class="language-C#">public class ContextHolder {  	public string Context {get;set;} }  public class ContextAccessor { 	static AsyncLocal<ContextHolder> _contextCurrent = new AsyncLocal<ContextHolder>();  	public string Context 	{ 		get => _contextCurrent.Value?.Context; 		set  		{  			var holder = _contextCurrent.Value;             // 拿到原来的holder 直接修改成新的value             // asp.net core源码是设置为null 因为在它的逻辑中执行到了这个Set方法             // 就必然是一个新的http请求，需要把以前的清空 			if (holder != null) holder.Context = value;             // 如果没有holder 那么新建 			else _contextCurrent.Value = new ContextHolder { Context = value}; 		} 	} }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cd286744933ccbb71e3ecb4635f6fc3d.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <p>最终结果就和我们预期的一致了，流程也如下图一样。自始至终都是修改的同一个<code>ContextHolder</code>对象。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/504dc4dd5a23936021637c2462b049c6.jpg" alt="为什么HttpContextAccessor要这么设计?"></p> <h2 id="总结">总结</h2> <p>由上可见，ASP.NET Core 6.0的<code>HttpContextAccessor</code>那样设计的原因就是为了解决AsyncLocal在<code>await</code>环境中会发生复制，导致不能及时清除历史的<code>HttpContext</code>的问题。<br /><strong>笔者水平有限，如果错漏，欢迎指出，感谢各位的阅读！</strong></p> <h2 id="附录">附录</h2> <p>ASP.NET Core 2.1 HttpContextAccessor源码：link<br /> ASP.NET Core 6.0 HttpContextAccessor源码：link<br /> AsyncMethod Start方法源码:link<br /> AsyncLocal源码：link</p> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2043.htm">以字符串的升序排列单词-JavaScript</a></p>
                                                        <p>下一个：<a href="/html/category/article-2045.htm">MVVM中的数据的刷新</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7825.htm" title="口红排行榜前十名高端品牌有哪些价格多少(口红排行榜前十名高端品牌有哪些牌子)">口红排行榜前十名高端品牌有哪些价格多少(口红排行榜前十名高端品牌有哪些牌子)</a></li>
                        <li class="py-2"><a href="/html/category/article-8239.htm" title="5月20日nba湖人勇士直播回放（干货分享）nba赛程回看湖人对勇士，大陆小岛，cctv体育频道，">5月20日nba湖人勇士直播回放（干货分享）nba赛程回看湖人对勇士，大陆小岛，cctv体育频道，</a></li>
                        <li class="py-2"><a href="/html/category/article-7687.htm" title="宠物领养网免费 北京 北京领养宠物中心">宠物领养网免费 北京 北京领养宠物中心</a></li>
                        <li class="py-2"><a href="/html/category/article-7778.htm" title="猫三联三针一共多少钱（猫三联一针价格）">猫三联三针一共多少钱（猫三联一针价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-7364.htm" title="猫咪三针疫苗的作用（猫咪三针疫苗包括哪些）">猫咪三针疫苗的作用（猫咪三针疫苗包括哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-6997.htm" title="黄老师教育（中国教育电视台）这都可以，">黄老师教育（中国教育电视台）这都可以，</a></li>
                        <li class="py-2"><a href="/html/category/article-7411.htm" title="领养宠物要钱吗现在（领养宠物麻烦吗）">领养宠物要钱吗现在（领养宠物麻烦吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-8009.htm" title="领养宠物需要身份证复印件（领养宠物要签合同吗）">领养宠物需要身份证复印件（领养宠物要签合同吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7503.htm" title="皮肤管理有哪些加盟品牌的(皮肤管理加盟品牌排行)">皮肤管理有哪些加盟品牌的(皮肤管理加盟品牌排行)</a></li>
                        <li class="py-2"><a href="/html/category/article-8238.htm" title="火龙果饼的家常做法">火龙果饼的家常做法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>