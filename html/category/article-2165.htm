<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2165.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>SpringMVC 最详细笔记必备知识点 - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>SpringMVC 最详细笔记必备知识点</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2 id="springmvc">SpringMVC</h2> <h3 id="1、什么是springmvc">1、什么是SpringMVC</h3> <p> 是一种轻量级的，基于MVC的web应用层框架，对Servlet封装</p> <p><strong>MVC：</strong></p> <p> M：Model，模型层，指javaBean，作用是==处理数据==</p> <p> javaBean：</p> <p> 实体类，业务处理，即Service，Dao</p> <p> V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，==展示数据==</p> <p> C：Controller，控制层，指工程中的servlet，作用是==接收请求==和==响应浏览器==</p> <h3 id="2、springmvc流程">2、springmvc流程</h3> <h5 id="相关组件：">相关组件：</h5> <ol> <li> <p>前端控制器（DispatcherServlet）：接收请求，响应结果, 降低了组件之间的耦合性</p> <pre><code>2. 处理器映射器（HandlerMapping）：根据URL去查找处理器</code></pre> </li> <li> <p>处理器适配器（HandlerAdapter）：按照特定规则（HandlerAdapter要求的规则）去执行Handler</p> <pre><code>4. 处理器（Handler）：即各个Controller（需要程序员去写代码处理逻辑的）</code></pre> <ol start="5"> <li>视图解析器（ViewResovler）：进行视图解析，对返回的字符串，进行处理，可以解析成对应的页面</li> </ol> </li> </ol> <h5 id="处理流程详解">处理流程详解</h5> <p> 1.用户发起请求到前端控制器（DispatcherServlet）</p> <p> 2、前端控制器请求处理器映射器（HandlerMapping）去查找处理器（Handle）：通过xml配置或者注解进行查找</p> <p> 3、找到Handle以后，处理器映射器（HandlerMapping）向前端控制器返回执行链（HandlerExecutionChain）（包括生成处理</p> <p> 器对象及处理器拦截器等）</p> <p> 4、前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（==Handler，即Controller, 即Servlet层==）</p> <p> 5、处理器适配器（HandlerAdapter）去执行Handler中的方法</p> <p> 6、Handler执行完后，给处理器适配器返回ModelAndView</p> <p> 7、处理器适配器向前端控制器返回ModelAndView</p> <p> 8、前端控制器请求视图解析器（ViewResolver）去进行视图解析，解析成view</p> <p> 9、视图解析器（ViewResolver）向前端控制器返回View</p> <p> 10、前端控制器对视图进行渲染</p> <p> 11、前端控制器向用户响应结果</p> <p><img alt="springmvc执行流程" style="zoom: 67%;"/></p> <h3 id="3、springmvc：具体实现流程">3、SpringMVC：具体实现流程</h3> <p><strong>1、导入jar包</strong></p> <ol> <li>commons-logging-1.1.1.jar</li> <li>spring-aop-5.2.16.RELEASE.jar</li> <li>spring-beans-5.2.16.RELEASE.jar</li> <li>spring-aspects-5.2.16.RELEASE.jar</li> <li>spring-context-5.2.16.RELEASE.jar</li> <li>spring-core-5.2.16.RELEASE.jar</li> <li>spring-expression-5.2.16.RELEASE.jar</li> <li>spring-web-5.2.16.RELEASE.jar</li> <li>spring-webmvc-5.2.16.RELEASE.jar</li> </ol> <p><strong>2、发起了一个请求</strong></p> <pre><code class="language-html">  请求</code></pre> <p><strong>3、在web.xml中配置了核心控制器（前端控制器）</strong></p> <pre><code class="language-xml">      <servlet>          <!--注册DispatcherServlet-->           <servlet-name>dispatcherServlet</servlet-name>           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>            <!-- 指定核心配置文件的位置  -->           <init-param>             <!--name值为固定内容-->               <param-name>contextConfigLocation</param-name>             <!--在src下配置的xml-->               <param-value>classpath:springmvc.xml</param-value>           </init-param>            <!-- 启动tomcat就立即创建DispatcherServlet实例。数越小执行越早-->           <load-on-startup>1</load-on-startup>        </servlet>        <servlet-mapping>           <servlet-name>dispatcherServlet</servlet-name>           <!-- url-pattern:两种写法  1） *.do、 *.action、 *.mvc  2)斜杠 / -->           <url-pattern>/</url-pattern>       </servlet-mapping></code></pre> <p><strong>4、创建springmvc.xml核心配置文件</strong></p> <p><strong>①：头部</strong></p> <pre><code class="language-xml"><?xml version="1.0" encoding="UTF-8"?> <beans xmlns="http://www.springframework.org/schema/beans"     xmlns:mvc="http://www.springframework.org/schema/mvc"     xmlns:context="http://www.springframework.org/schema/context"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xsi:schemaLocation="         http://www.springframework.org/schema/beans         https://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         https://www.springframework.org/schema/context/spring-context.xsd         http://www.springframework.org/schema/mvc         https://www.springframework.org/schema/mvc/spring-mvc.xsd">      <!--各种配置-->  </beans></code></pre> <p><strong>②：配置扫描</strong></p> <pre><code class="language-xml">      <!--开启mvc注解扫描 -->       <mvc:annotation-driven/>       <!--扫描controller包中所有的类，为创建controller对象 -->       <context:component-scan base-package="com.bdqn.controller"></context:component-scan></code></pre> <p><strong>③：配置视图解析器</strong></p> <pre><code class="language-xml">      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">           <!--前缀-->           <!--jsp为放在WEB-INF下的文件：用于专门存放页面-->         <property name="prefix" value="/WEB-INF/jsp/"></property>            <!--后缀-->         <property name="suffix" value=".jsp"></property>       </bean></code></pre> <p><strong>5、创建Controller类</strong></p> <pre><code class="language-java">        @Controller //创建Controller对象并放入到springmvc容器中         public class UserController{                         @RequestMapping("/test") //配置请求映射路径              public String test(){                                 return "success";//返回的页面             }         }</code></pre> <h3 id="4、requestmapping注解">4、@RequestMapping()注解</h3> <p>@RequestMapping()注解</p> <p> 1、位置</p> <pre><code>      1、在类上：表示模块路径    2、在方法上：表示具体路径 （处理器方法、映射器方法）</code></pre> <p> 2、属性</p> <p> value="/路径":映射路径，斜杠可以省略，但不建议</p> <p> method:请求方式</p> <p> 值：RequestMethod.GET 处理get请求</p> <p> RequestMethod.POST 处理post请求</p> <p> ==注==：若没有method，则支持所有请求</p> <h3 id="5、springmvc入参">5、springmvc入参</h3> <h4 id="1、单个参数：要求方法参数名必须和请求参数名保持一致">1、单个参数：要求方法参数名必须和请求参数名保持一致</h4> <pre><code>         删除          public String del(Integer id){  }</code></pre> <h4 id="2、多个参数：">2、多个参数：</h4> <p><strong>1、方法参数名和请求参数名==一致==的情况：</strong></p> <pre><code>         删除                  public String del(Integer id,String name){}</code></pre> <p><strong>2、方法参数名和请求参数名==不一致==的情况，需要使用==@RequestParam==注解</strong></p> <pre><code>public String showPage(@RequestParam(value="number",required=false,defaultValue="1")Integer curPage    ){<!-- --></code></pre> <p><strong>@RequestParam注解</strong>：将请求参数绑定到方法参数上</p> <p> value：接收的参数名</p> <p> required：是否必须包含该参数，该参数内容是否可以为空， 默认为true（必须要传参数）；false则相反</p> <p> defaultValue：默认值，如果没有传参，则有默认值</p> <p><strong>3、以对象入参：请求参数必须和对象==实体类中的属性名一致==</strong></p> <pre><code>        public String add(User user) {}</code></pre> <h3 id="6、springmvc出参">6、springmvc出参</h3> <h4 id="1、modelandview类：存储数据视图"><strong>1、ModelAndView类：存储数据+视图</strong></h4> <pre><code class="language-java">    public ModelAndView findAll(){            ModelAndView mv = new ModelAndView();            mv.addObject("user", user); //存储数据            mv.setViewName("student/list"); //存储视图            return mv;        }</code></pre> <h4 id="2、model类：存储数据"><strong>2、Model类：存储数据</strong></h4> <pre><code class="language-java">        public String findAll(Model model){            model.addAttribute("user", user); //存储数据            return "student/list"; //返回视图        }</code></pre> <h4 id="3、使用servlet原生接口">3、使用servlet原生接口</h4> <p><strong>1、request:</strong></p> <pre><code class="language-java">    public String 方法名(HttpServletRequest request){}</code></pre> <p><strong>2、session:</strong></p> <pre><code class="language-java">    public String 方法名(HttpSession session){}</code></pre> <p><strong>3、response:</strong></p> <pre><code class="language-java">    public void del(HttpServletResponse response) throws IOException{                response.setContentType("text/html;charset=utf-8"); //处理响应中文                //删除成功后，重新跳入到controller下的findAll方法中进行查询                response.getWriter().print("<script>alert('删除成功！');location.href='findAll';</script>");            }</code></pre> <h4 id="4、使用map接口">4、使用Map接口</h4> <pre><code class="language-java">        public String findAll(Map<String,Object> map){            map.put("key",value);        }</code></pre> <h4 id="5、重定向：springmvc默认转发跳转">5、重定向：==springmvc默认转发跳转==</h4> <p><strong>关键字：</strong>==redirect:==</p> <pre><code class="language-java">        public String 方法名(){            return "redirect:/stu/findAll";        }</code></pre> <h3 id="7、处理请求中文乱码问题">7、处理请求中文乱码问题</h3> <h4 id="一：post请求乱码问题">一：post请求乱码问题</h4> <p><strong>在web.xml中配置</strong></p> <pre><code class="language-xml"> <filter>      <filter-name>characterEncodingFilter</filter-name>      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>           <init-param>  <!--设置项目中的字符编码-->          <param-name>encoding</param-name>            <param-value>UTF-8</param-value>      </init-param>      </filter>  <filter-mapping>            <filter-name>characterEncodingFilter</filter-name>       <!-- /*:表示所有的请求都先通过过滤器处理-->      <url-pattern>/*</url-pattern>        </filter-mapping></code></pre> <h4 id="二：get请求乱码问题">二：get请求乱码问题</h4> <p><strong>①：方法一</strong></p> <p>修改tomcat配置文件添加编码与工程编码一致，如下：</p> <pre><code class="language-xml"><Connector URIEncoding="utf-8" connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/></code></pre> <p><strong>②：方法二</strong></p> <pre><code class="language-java">String userName = new String(request.getParamter("userName").getBytes("ISO8859-1"),"utf-8")</code></pre> <h3 id="8、springmvc如何处理静态资源">8、springmvc如何处理静态资源</h3> <p><strong>如js、css、image、html等</strong></p> <p>原因：web.xml中配置了DispatcherServlet的url-pattern为“/”，导致所有的静态资源都交给了DispatcherServlet处理，而</p> <p>DispatcherServlet不能处理静态资源的访问。所以导致静态资源的访问都是404。</p> <p><strong>1、第一种处理方式：</strong></p> <p> ==需要依赖tomcat==</p> <p>在springmvc.xml中配置: mvc:default-servlet-handler/</p> <p><strong>2、第二种处理方式：</strong> ==推荐==</p> <p>在springmvc.xml中配置:</p> <pre><code class="language-xml"> <mvc:resources location="/static/" mapping="/static/**"/><!--mvc:resoutces加入后框架会创建ResourceHttpRequestHandler对象，让该对象处理静态资源的访问问题，而不依赖tomcat服务器mapping：访问静态资源的url地址，使用通配符 **location：静态资源在项目中的目录位置--></code></pre> <p><strong>实现步骤：</strong></p> <p> 1）在webapp下创建static文件夹，把images、js、css等都放入到该文件中</p> <p> 2）在springmvc中配置：</p> <p> <mvc:resources location="/static/" mapping="/static/**"/></p> <p> 3）页面使用：</p> <pre><code class="language-jsp">            <script type="text/javascript" src="static/js/jquery-1.12.4.js"></script> 相对路径            <img src="<%=basePath%>/static/images/read.jpg" alt="SpringMVC 最详细笔记必备知识点"/>  绝对路径            <img src="${pageContext.request.contextPath}/static/images/user/dongtu.gif" alt="SpringMVC 最详细笔记必备知识点"/> 绝对路径</code></pre> <h3 id="9、获取绝对路径">9、获取绝对路径</h3> <p>方法一：</p> <pre><code class="language-jsp"> <%String path = request.getContextPath();String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";%></code></pre> <p>方法二：</p> <pre><code class="language-jsp">${pageContext.request.contextPath}</code></pre> <h3 id="10、springmvc：ajax请求">10、SpringMVC：ajax请求</h3> <h4 id="一：基于fastjson依赖">一：基于fastjson依赖</h4> <p><strong>引入包</strong>：fastjson-1.2.6.jar</p> <p><strong>1、使用out输出流对象处理 + fastjson依赖</strong></p> <pre><code class="language-java">    public void 方法名(HttpServletResponse response) throws IOException{        response.setContentType("text/html;charset=utf-8");        response.getWriter().print(返回的数据); （若返回类型为json，需要把对象转成json类型）    }</code></pre> <p><strong>2、使用@ResponseBody注解 + fastjson依赖</strong></p> <pre><code class="language-java">    @RequestMapping(value="/路径",produces="text/html;charset=utf-8")    @ResponseBody //通过response响应给用户,不再走视图解析器了，而是直接将数据写入到输出流中    public String 方法名(){        return 返回的数据; （若返回类型为json，仍需要把对象转成json类型）    }</code></pre> <h4 id="二：基于springmvc默认的jackson依赖">二：基于SpringMVC默认的jackson依赖</h4> <p><strong>1、引入包</strong>：jackson-core-2.9.8.jar</p> <p>jackson-databind-2.9.8.jar</p> <p>jackson-annotations-2.9.8.jar</p> <p><strong>2、controller处理：</strong></p> <p><strong>1、处理返回text类型</strong></p> <pre><code class="language-java">            @RequestMapping("/ajax")            @ResponseBody//文件上传注解            public String 方法名(){                            return str;             }</code></pre> <p><strong>2、处理返回json类型</strong></p> <pre><code class="language-java">           public List<类型> 方法名(){                    return list;             }            public 类型 方法名(){                            return 对象;             }            public Map<类型,类型> 方法名(){                            return map;             }</code></pre> <p><strong>3、处理返回html类型</strong></p> <pre><code class="language-java">        public String 方法名(){                String str = "带有html标签的数据";                            return str;             }</code></pre> <h3 id="11、文件上传">11、文件上传</h3> <h4 id="1、单文件上传">1、单文件上传</h4> <h5 id="1、表单：">1、表单：</h5> <p> ①、表单提交格式必须是post提交</p> <p> ②、表单增加属性：enctype="multipart/form-data"</p> <p> ③、文本框增加name属性</p> <p> ④、提供文件域：<input type="file" name="文件名"/></p> <pre><code class="language-jsp"><form action="<%=basePath%>standardController/addON" method="post" enctype="multipart/form-data"> </form><input type="file" name="photo"/></code></pre> <h5 id="2、jar包：">2、jar包：</h5> <p> ①：支持文件上传：commons-fileupload-1.4.jar</p> <p> ②：io流：commons-io-2.7.jar</p> <h5 id="3、用js控制文件上传类型">3、用js控制文件上传类型</h5> <pre><code class="language-javascript">    $("[name=photo]").change(function(){        var val = $(this).val();        //获取当前文件的后缀        //substring:提取字符串中,介于两个指定下标之间的字符,设置一个值，即从那开始        //lastIndexOf():指定的字符串值最后出现的位置,从后往前查找        var zhui = val.substring(val.lastIndexOf("."));        if(zhui!=".jpg" && zhui!=".gif" && zhui!=".png" && zhui!=".bmp"){              alert("请选择正确的图片格式");              $(this).val("");//清空选中文件        }    });</code></pre> <h5 id="4、在springmvcxml中配置文件解析器对象">4、在springmvc.xml中配置文件解析器对象</h5> <pre><code class="language-xml"><bean id="multipartResolver"       class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/></code></pre> <p> 注意：</p> <p> 1）CommonsMultipartResolver:判断请求中是否包含文件，如果包含，则将请求的文件进行解析成MultipartFile，并传递给</p> <p>controller</p> <p> 2）要求id必须是multipartResolver</p> <h5 id="5、文件上传controller处理方法：">5、文件上传Controller处理方法：</h5> <pre><code class="language-java">  @RequestMapping("/fileOn")     public void fileOn(user u,MultipartFile photo,HttpSession session,HttpServletResponse response) throws         IllegalStateException, IOException{         if(!photo.isEmpty()){//判断是否为空             //创建文件             String path=session.getServletContext().getRealPath("/static/updateFile/");             //获取当前文件的存储路径             System.out.println(path);             File file=new File(path);             //判断当前文件夹是否存在             if(!file.exists()){                 //不存在创建                 file.mkdirs();             }             //文件名处理             //获取文件名             String filePD=FilenameUtils.getExtension(photo.getOriginalFilename());             //为文件取随机名；防止覆盖             String fileName=UUID.randomUUID().toString().replace("-", "").toUpperCase()+"."+filePD;             //将文件名放到上方创建的updateFile中             file=new File(path,fileName);             //文件上传             photo.transferTo(file);             //将文件存入实体类对应列             u.setFileName(fileName);         }         int row=us.insertON(u);         if(row!=0){             response.getWriter().print("<script>alert('插入成功');location.href='findAll'</script>");         }else{             response.getWriter().print("<script>alert('插入失败');history.back()</script>");         }</code></pre> <h4 id="2、多文件上传">2、多文件上传</h4> <h5 id="1、要求页面上所有文件域的name的名必须相同">1、要求页面上所有文件域的name的名必须相同</h5> <pre><code class="language-jsp">照片1：<input type="file" name="photos"><br/>照片2：<input type="file" name="photos"><br/>照片3：<input type="file" name="photos"><br/></code></pre> <h5 id="2、controller中使用-multipartfile-接收">2、controller中使用 MultipartFile[] 接收</h5> <p>在循环外面经行文件创建</p> <pre><code class="language-java">public void fileOn(user u,MultipartFile[] photos,HttpSession session,HttpServletResponse response){     //创建文件         String path=session.getServletContext().getRealPath("/static/updateFile/");         System.out.println(path);         File file=new File(path);         //判断当前文件夹是否存在         if(!file.exists()){             //不存在创建             file.mkdirs();         }         for (int i = 0; i < photos.length; i++) {             MultipartFile photo=photos[i];             if(!photo.isEmpty()){//判断是否为空                    //文件名处理                 //获取文件名                 String filePD=FilenameUtils.getExtension(photo.getOriginalFilename());                 //为文件取随机名；防止覆盖                 String fileName=UUID.randomUUID().toString().replace("-", "").toUpperCase()+"."+filePD;                 //将文件名放到上方创建的updateFile中                 file=new File(path,fileName);                 //文件上传                 photo.transferTo(file);                if(i==0){                    u.setFileName1(fileName);                }else if(i==1){                    u.setFileName2(fileName);                }else{                    u.setFileName3(fileName);                }             }        }                 int row=us.insertON(u);         if(row!=0){             response.getWriter().print("<script>alert('插入成功');location.href='查询全部方法'</script>");         }else{             response.getWriter().print("<script>alert('插入失败');history.back()</script>");         }}</code></pre> <h3 id="12、文件下载">12、文件下载</h3> <h4 id="1、方式一：使用html标签：">1、方式一：使用html标签：</h4> <p>下载图片之外的文件等：</p> <pre><code class="language-jsp">    下载doc</code></pre> <p>下载图片：</p> <pre><code class="language-jsp">              <img src="static/download/read.jpg" alt="SpringMVC 最详细笔记必备知识点" width="50" height="50"/>    </code></pre> <h4 id="2、方式二：使用流实现：">2、方式二：使用流实现：</h4> <p>页面：</p> <pre><code class="language-jsp">用文件流下载doc</code></pre> <p>controller:</p> <pre><code class="language-java">public void download(String fileName,HttpSession session,HttpServletResponse response) throws FileNotFoundException, IOException{    //文件路径为tomcate中的图片存储位置，自定义，依据文件上传创建的文件            String path = session.getServletContext().getRealPath("/static/updateFile/")+fileName;//获取文件路径            File f = new File(path);            if(f.exists()){ //如果文件存在，则下载                //设置响应头，以附件形式进行下载（激活下载框，文件名会自动填充到下载框中）                response.addHeader("Content-Disposition", "attachment;fileName="+fileName);                //以流的形式对外输出，输出服务器上指定的File                IOUtils.copy(new FileInputStream(path), response.getOutputStream());            }        }</code></pre> <h3 id="13、spring支持rest风格的url">13、spring支持Rest风格的url</h3> <p>1、页面：</p> <pre><code class="language-jsp">        请求</code></pre> <p>2、controller接参：</p> <pre><code class="language-java">     //在此处接收时定义参数名           @RequestMapping("login/{id}/{name}")     // @PathVariable注解：可以将 URL 中占位符参数绑定到控制器处理方法的入参中。                  public String login(@PathVariable int id,@PathVariable String name){ //参数名id必须和{id}中的完全一致            System.out.println(id+"\t"+name);            return "success";        }        //如果参数的名字不一致，需要指定@PathVariable("name")中的关键字和{name}完全一致。        @RequestMapping("login/{id}/{name}")        public String login(@PathVariable(value="id") int id,@PathVariable(value="name") String userName){        }</code></pre> <p>3、Rest风格处理文件名上传问题：</p> <pre><code class="language-java">     @RequestMapping("/download/{fileName:.+}")</code></pre> <h3 id="14、springmvc中其他注解">14、springmvc中其他注解</h3> <p>Spring4.3中引进了@GetMapping、@PostMapping，来帮助简化常用的HTTP方法的映射，并更好地表达被注解方法的语义。</p> <p>①：@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将get请求映射到特定的处理方法上。</p> <p>②：@PostMapping是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。该注解将post请求映射到特定的处理方法上。</p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2164.htm">termux使用教程python-Termux 入门教程：架设手机 Server 下载文件</a></p>
                                                        <p>下一个：<a href="/html/category/article-2166.htm">SpringBoot+Lombok+Builder实现任意个数属性的对象构造</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6997.htm" title="黄老师教育（中国教育电视台）这都可以，">黄老师教育（中国教育电视台）这都可以，</a></li>
                        <li class="py-2"><a href="/html/category/article-6163.htm" title="狗粮成本多少钱一斤（狗粮制作成本是多少）">狗粮成本多少钱一斤（狗粮制作成本是多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-6859.htm" title="和田宠物批发市场地址（和田宠物批发市场地址电话）">和田宠物批发市场地址（和田宠物批发市场地址电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-5943.htm" title="动物疫苗在哪里购买（动物疫苗去哪里买）">动物疫苗在哪里购买（动物疫苗去哪里买）</a></li>
                        <li class="py-2"><a href="/html/category/article-6951.htm" title="冬瓜炖鸭汤的做法窍门窍门(冬瓜炖鸭汤的做法大全)">冬瓜炖鸭汤的做法窍门窍门(冬瓜炖鸭汤的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-6721.htm" title="歌曲人世间表达了什么（奔走相告）歌曲人世间原唱雷佳，叶问3演员表，坐88路车回家 电视剧，">歌曲人世间表达了什么（奔走相告）歌曲人世间原唱雷佳，叶问3演员表，坐88路车回家 电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7549.htm" title="内江宠物狗商家（内江宠物狗商家电话号码）">内江宠物狗商家（内江宠物狗商家电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-7410.htm" title="动物疫苗使用时的注意事项（动物疫苗使用时的注意事项不包括）">动物疫苗使用时的注意事项（动物疫苗使用时的注意事项不包括）</a></li>
                        <li class="py-2"><a href="/html/category/article-6813.htm" title="狗粮生产机器设备多少钱一个（生产狗粮的设备多少钱）">狗粮生产机器设备多少钱一个（生产狗粮的设备多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-5942.htm" title="面板开关什么牌子好?面板开关品牌推荐(面板开关哪个品牌好)">面板开关什么牌子好?面板开关品牌推荐(面板开关哪个品牌好)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>