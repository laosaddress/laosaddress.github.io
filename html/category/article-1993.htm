<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-1993.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>设计模式：单例模式(singleton) - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>设计模式：单例模式(singleton)</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li>前言</li> <li>一、单例代码实现</li> <li> <ul> <li>1.主程序代码</li> <li>2.静态常量(static final)</li> <li>3. 静态代码块(static code)</li> <li>4. 同步静态方法(synchronized static method)</li> <li>5. 双重检查(double check)</li> <li>6. 静态内部类(static inside class)</li> </ul> </li> <li>总结</li> </ul> </div> <hr/> <h1>前言</h1> <p>单例模式：</p> <ol> <li>是在整个软件生命周期中，值存在一个实例。使用单例模式可以提供系统性能。属于<code>创建者</code>。</li> <li>使用场景：频繁创建和销毁的对象、创建对象耗时过长或耗费资源过多的对象。</li> </ol> <hr/> <h1>一、单例代码实现</h1> <h2>1.主程序代码</h2> <blockquote> <p>代码如下（示例）：</p> </blockquote> <pre><code class="prism language-java"><span class="token comment">/**  * 保证整个软件系统中，对某个类智能存在一个对象实例  * 属于创建者模式  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonClient</span><span class="token punctuation">{<!-- --></span><span class="token comment">/**      * 1. 饿汉式（静态常量）      * 2. 饿汉式（静态代码块）      * 3. 懒汉式（线程安全、同步方法）      * 4. 双重检查      * 5. 静态内部类      * 6. 枚举      */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">staticFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">staticCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">synchronizedCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">staticInsideClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">enumInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//枚举</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">enumInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonEnum</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonEnum</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token class-name">SingletonEnum</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonEnum</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//饿汉式（静态常量）</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">staticFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonStaticFinal</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonStaticFinal</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonStaticFinal</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonStaticFinal</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//饿汉式（静态代码块）</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">staticCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonStaticCode</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonStaticCode</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//懒汉式（同步方法）</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonSynchronizedMethod</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonSynchronizedMethod</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//懒汉式（同步代码块）</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">synchronizedCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonSynchronizedCode</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonSynchronizedCode</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//懒汉式（静态内部类）</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">staticInsideClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SingletonStaticInsideClass</span> singleton1<span class="token operator">=</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SingletonStaticInsideClass</span> singleton2<span class="token operator">=</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 hash code =  "</span><span class="token operator">+</span> singleton1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton2 hash code  = "</span><span class="token operator">+</span> singleton2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton1 = singleton2  is "</span><span class="token operator">+</span><span class="token punctuation">(</span>singleton1<span class="token operator">==</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>2.静态常量(static final)</h2> <blockquote> <p>代码实现</p> </blockquote> <pre><code class="prism language-java"><span class="token comment">/**  * 静态常量：单例  * instance:在类装载到方法区时，静态常量会自动创建。避免了多线程.  * 不好的地方是如果不使用，就会浪费内存。  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonStaticFinal</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">SingletonStaticFinal</span>  instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonStaticFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 私有化是为了防止，外部类创建。      */</span><span class="token keyword">private</span><span class="token class-name">SingletonStaticFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">SingletonStaticFinal</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>3. 静态代码块(static code)</h2> <p>代码如下（示例）：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 静态代码块：单例  * instance:在类装载到方法区时，会执行静态代码块。避免了多线程.  * 不好的地方是如果不使用，就会浪费内存。  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">SingletonStaticCode</span> instance<span class="token punctuation">;</span><span class="token comment">//静态代码块</span><span class="token keyword">static</span><span class="token punctuation">{<!-- --></span>         instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 私有化是为了防止，外部类创建。      */</span><span class="token keyword">private</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">SingletonStaticCode</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>4. 同步静态方法(synchronized static method)</h2> <p>代码如下（示例）：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 同步静态方法：单例  * instance:在JAVA堆上创建，只有在使用的时候会创建。会出现多线程问题.  * 需要添加同步（synchronized）方法  * 只有在使用的时候创建，避免浪费内存。  * 出现问题：效率过低，每次调用都是同步  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">SingletonSynchronizedMethod</span> instance<span class="token punctuation">;</span><span class="token comment">/**      * 私有化是为了防止，外部类创建。      */</span><span class="token keyword">private</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token comment">/**      * 每次执行，都是同步执行。导致效率过低      */</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">static</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonSynchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>5. 双重检查(double check)</h2> <p>代码如下（示例）：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 双重检查：单例  * instance:在JAVA堆上创建，只有在使用的时候会创建。会出现多线程问题.  * 需要添加同步（synchronized）方法  * 只有在使用的时候创建，避免浪费内存。  * 推荐使用  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">volatile</span><span class="token class-name">SingletonSynchronizedCode</span> instance<span class="token punctuation">;</span><span class="token comment">/**      * 私有化是为了防止，外部类创建。      */</span><span class="token keyword">private</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token comment">//双重检查，</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">SingletonStaticCode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//如果不检查，多线程情况下会创建多个实例</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonSynchronizedCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>6. 静态内部类(static inside class)</h2> <p>代码如下（示例）：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 静态内部类：单例  * 推荐使用  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">SingletonStaticInsideClass</span> instance<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token punctuation">{<!-- --></span>         instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 私有化是为了防止，外部类创建。      */</span><span class="token keyword">private</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">class</span><span class="token class-name">Signleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">SingletonStaticInsideClass</span> INSTANCE<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">SingletonStaticInsideClass</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//当静态方法调用是，才会加载内部静态类。</span><span class="token comment">//而内部静态类，在加载到方法区的时候会创建静态常量，避免多线程创建。</span><span class="token keyword">return</span><span class="token class-name">Signleton</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <hr/> <h1>总结</h1> <p>推荐使用：</p> <ol> <li>双重检查</li> <li>静态内部类</li> <li>枚举：还能有效防止反序列化。</li> </ol> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1992.htm">Swagger在SpringBoot中的的一些详细配置</a></p>
                                                        <p>下一个：<a href="/html/category/article-1994.htm">橙子&#8211;python字典的增删改查与集合的增删改查</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6767.htm" title="办宠物医院需要什么资质（宠物医院开办批准手续）">办宠物医院需要什么资质（宠物医院开办批准手续）</a></li>
                        <li class="py-2"><a href="/html/category/article-6858.htm" title="宠物领养协议书怎么写的图片（宠物领养协议书怎么写的图片大全）">宠物领养协议书怎么写的图片（宠物领养协议书怎么写的图片大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6030.htm" title="动物疫苗的作用意义是什么意思 动物疫苗的作用意义是什么意思啊">动物疫苗的作用意义是什么意思 动物疫苗的作用意义是什么意思啊</a></li>
                        <li class="py-2"><a href="/html/category/article-6812.htm" title="海拉鲁原型（海拉鲁有多大）">海拉鲁原型（海拉鲁有多大）</a></li>
                        <li class="py-2"><a href="/html/category/article-6013.htm" title="宠爱国际动物医院电话北京（北京宠爱国际动物医疗）">宠爱国际动物医院电话北京（北京宠爱国际动物医疗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4599.htm" title="动物防疫站可以给猫打疫苗吗（动物防疫站可以给猫打疫苗吗视频）">动物防疫站可以给猫打疫苗吗（动物防疫站可以给猫打疫苗吗视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-6720.htm" title="宠物店一年的利润多少（小宠物店每个月利润）">宠物店一年的利润多少（小宠物店每个月利润）</a></li>
                        <li class="py-2"><a href="/html/category/article-6074.htm" title="正宗韩国烤肉的做法（正宗韩国烤肉的做法大全）">正宗韩国烤肉的做法（正宗韩国烤肉的做法大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-7043.htm" title="动物疫苗可以去畜牧局批发吗（动物疫苗经销商）">动物疫苗可以去畜牧局批发吗（动物疫苗经销商）</a></li>
                        <li class="py-2"><a href="/html/category/article-6118.htm" title="汽车投诉最多的什么车(汽车投诉最少排行榜)">汽车投诉最多的什么车(汽车投诉最少排行榜)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>