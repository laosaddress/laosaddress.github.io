<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2113.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>springboot集成elasticsearch7.2 - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>springboot集成elasticsearch7.2</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <p>上篇文章我们讲解了elasticsearch的安装，这次我们来搞一下，如何在自己的项目中集成elasticsearch。 正常来讲spring-data中都会提供相应的starter，让我们方便的使用各种Template操作对应的组件，比如常用RedisTemplate, JdbcTemplate等，其实spring-data中也提供的相应的elasticsearch的对应工具。但是我这里并没有使用，而是直接使用的elasticsearch原生api实现的。为什么这么做呢，因为spring-data-elasticsearch 最新的版本3.2，最高支持的elasticsearch版本为6.8， 而我们用的是7.2的版本，并且官方建议我们使用的jar版本最好和软件版本一致。</p> <p><img fetchpriority="high" decoding="async" alt="" height="732" src="http://img.555519.xyz/uploads3/20220602/c6f3a84657cbed68fc7016bceb42568e.jpg"></p> <p><img decoding="async" alt="" height="798" src="http://img.555519.xyz/uploads3/20220602/a11ecaf436657c56d37685b60a8a19fb.jpg"></p> <p>还有一个问题， 是关于客户端的， spring-data-elasticsearch中默认使用的是TransportClient, 这个客户端在7这个版本中已经不再建议使用了，并且将会在8的版本中彻底移除。而我们用的是7这个版本，目前推荐使用的elasticsearch的高级客户端，HighLevelRestClient. spring-data-es中声明会一直支持TransportClient，只要你的这个es版本支持。当然，spring-data-es中也是支持高级别客户端的，但是还有由于支持版本过低的问题，所以我最后还是决定采用原生客户端。如果大家用的es版本比较低，还是可以使用spring-data-es的。</p> <p><img decoding="async" alt="" height="582" src="http://img.555519.xyz/uploads3/20220602/72853e63d536db1e7629a3fbd3f5ca71.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="986" src="http://img.555519.xyz/uploads3/20220602/af7450136695a7dfc190773cab92b954.jpg"></p> <p>接下来我们来集成项目，集成之前，大家需要了解一下es中的一些专有名词，比如什么是索引，类型，文档，同时你要了解es是干什么用的。es最主要的功能就是查询，也就是他查东西的速度非常快，并且支持分词，全文检索。如果我们在mysql中查询一遍文章的内容，其实是非常痛苦的，我们可能必须得使用 like 或者拼接or去查询多个字段，并且有些场景是无法实现的，比如你的文章中的内容中包含 ”一朵鲜花“， 而你去搜索 ”一朵花“ 这种情况你是查不到的，但是es可以，因为es可以分词， 他会一朵鲜花， 分成&nbsp; ”一朵“&nbsp; ”鲜花“ 两个词，再把 ”一朵花“ 分成&nbsp; ”一朵“ 和 ”花“&nbsp; （注： 这里是个人方便理解，可能具体分词不是这么分的，大家领悟精髓）。 就很容易做到查询。 同时es查询的比较快，也是因为他的内部采用了倒叙索引，关于倒叙索引的原理，大家可以去找找资料，这里就不展开说了。</p> <p>一。 引入jar包</p> <pre><code>        &lt;dependency&gt;             &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;             &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;             &lt;version&gt;7.2.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;             &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;             &lt;version&gt;7.2.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;             &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;             &lt;version&gt;7.2.0&lt;/version&gt;         &lt;/dependency&gt;</code></pre> <p>二。封装工具类，这里主要使用高级别客户端封装， 主要封装了创建索引，判断索引是否存在，删除索引， 插入文档的功能，还有一些高级功能还没有 研究完，比如高亮和分页，我会一边研究一边更新，先给出一些简单的操作demo.后续文章我们在深入展开。</p> <pre><code class="language-java">@Component @Slf4j public class EsUtil {      @Resource     private RestHighLevelClient restHighLevelClient;       /**      * 创建索引(默认分片数为5和副本数为1)      * @param indexName      * @throws IOException      */     public boolean createIndex(String indexName) throws IOException {         CreateIndexRequest request = new CreateIndexRequest(indexName);         request.settings(Settings.builder()                 // 设置分片数为3， 副本为2                 .put("index.number_of_shards", 3)                 .put("index.number_of_replicas", 2)         );         request.mapping(generateBuilder());         CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);         // 指示是否所有节点都已确认请求         boolean acknowledged = response.isAcknowledged();         // 指示是否在超时之前为索引中的每个分片启动了必需的分片副本数         boolean shardsAcknowledged = response.isShardsAcknowledged();         if (acknowledged || shardsAcknowledged) {             log.info("创建索引成功！索引名称为{}", indexName);             return true;         }         return false;     }        /**      * 判断索引是否存在      * @param indexName      * @return      */     public boolean isIndexExists(String indexName){         boolean exists = false;         try {             GetIndexRequest getIndexRequest = new GetIndexRequest(indexName);             getIndexRequest.humanReadable(true);             exists = restHighLevelClient.indices().exists(getIndexRequest,RequestOptions.DEFAULT);         } catch (IOException e) {             e.printStackTrace();         }         return exists;     }      /**      * 删除索引      * @param indexName      * @return      */     public boolean delIndex(String indexName){         boolean acknowledged = false;         try {             DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(indexName);             deleteIndexRequest.indicesOptions(IndicesOptions.LENIENT_EXPAND_OPEN);             AcknowledgedResponse delete = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);             acknowledged = delete.isAcknowledged();         } catch (IOException e) {             e.printStackTrace();         }         return acknowledged;     }      /**      * 更新索引(默认分片数为5和副本数为1)：      * 只能给索引上添加一些不存在的字段      * 已经存在的映射不能改      *      * @param clazz 根据实体自动映射es索引      * @throws IOException      */     public boolean updateIndex(Class clazz) throws Exception {         Document declaredAnnotation = (Document )clazz.getDeclaredAnnotation(Document.class);         if(declaredAnnotation == null){             throw new Exception(String.format("class name: %s can not find Annotation [Document], please check", clazz.getName()));         }         String indexName = declaredAnnotation.index();         PutMappingRequest request = new PutMappingRequest(indexName);          request.source(generateBuilder(clazz));         AcknowledgedResponse response = restHighLevelClient.indices().putMapping(request, RequestOptions.DEFAULT);         // 指示是否所有节点都已确认请求         boolean acknowledged = response.isAcknowledged();          if (acknowledged ) {             log.info("更新索引索引成功！索引名称为{}", indexName);             return true;         }         return false;     }      /**      * 添加单条数据      * 提供多种方式：      *  1. json      *  2. map      *      Map&lt;String, Object&gt; jsonMap = new HashMap&lt;&gt;();      *      jsonMap.put("user", "kimchy");      *      jsonMap.put("postDate", new Date());      *      jsonMap.put("message", "trying out Elasticsearch");      *      IndexRequest indexRequest = new IndexRequest("posts")      *          .id("1").source(jsonMap);      *  3. builder      *      XContentBuilder builder = XContentFactory.jsonBuilder();      *      builder.startObject();      *      {      *          builder.field("user", "kimchy");      *          builder.timeField("postDate", new Date());      *          builder.field("message", "trying out Elasticsearch");      *      }      *      builder.endObject();      *      IndexRequest indexRequest = new IndexRequest("posts")      *      .id("1").source(builder);      * 4. source:      *      IndexRequest indexRequest = new IndexRequest("posts")      *     .id("1")      *     .source("user", "kimchy",      *         "postDate", new Date(),      *         "message", "trying out Elasticsearch");      *      *   报错：  Validation Failed: 1: type is missing;      *      加入两个jar包解决      *      * @return      */     public IndexResponse add(String indexName, Object o) throws IOException {         IndexRequest request = new IndexRequest(indexName);         String userJson = JSON.toJSONString(o);         request.source(userJson, XContentType.JSON);         IndexResponse indexResponse = restHighLevelClient.index(request, RequestOptions.DEFAULT);         return indexResponse;     }      private XContentBuilder generateBuilder() throws IOException {         XContentBuilder builder = XContentFactory.jsonBuilder();         builder.startObject();         {             builder.startObject("properties");             {                 // es7及以后去掉了映射类型--person                 builder.startObject("name");                     {                         builder.field("type", "text");                         builder.field("analyzer", "ik_smart");                     }                     builder.endObject();             }             {                 builder.startObject("age");                 {                     builder.field("type", "integer");                 }                 builder.endObject();             }             {                 builder.startObject("desc");                 {                     builder.field("type", "text");                     builder.field("analyzer", "ik_smart");                 }                 builder.endObject();             }             {                 builder.startObject("id");                 {                     builder.field("type", "integer");                 }                 builder.endObject();             }             builder.endObject();         }         builder.endObject();         /*.startObject().field("properties")             .startObject().field("person")                 .startObject("name")                     .field("type" , "text")                     .field("analyzer", "ik_smart")                 .endObject()                 .startObject("age")                     .field("type" , "int")                 .endObject()                 .startObject("desc")                     .field("type", "text")                     .field("analyzer", "ik_smart")                 .endObject()             .endObject()         .endObject();*/         return builder;     }    }</code></pre> <p>上面工具类中给出的索引结构是一个用户，只有id, name , age, desc 四个简单字段的结构</p> <p>同时desc字段和姓名字段都是使用的ik-smart做的分词。</p> <p>接下来大家就可以使用controller或者junittest来进行调用, 配合head插件观察数据。 整体的大致流程就是， index定义索引结构，然后我们把按格式数据存到es中， 使用es提供的高效api来做查询。 这篇文章先到这里，其实这里有一个痛点就是如果我们的数据结构比较复杂， 那么我们在创建索引的时候可能需要写出大量的代码，四个字段就这么多</p> <p><img loading="lazy" decoding="async" alt="" height="1200" src="http://img.555519.xyz/uploads3/20220602/5e5f90ff3993274657729e4a391eda09.jpg"></p> <p>所以这里其实我们可以根据实体的结构自动设计索引结构，像spring-data-es中就是根据我们在实体类上的注解，自动创建索引的。我这里也实现了自定义注解来创建es索引结构的方法，下一篇文章给大家介绍一下。</p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2112.htm">JS实现数码时钟</a></p>
                                                        <p>下一个：<a href="/html/category/article-2114.htm">Kotlin的标准函数和静态方法</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2185.htm" title="css实现文本垂直居中水平居中的几种方法">css实现文本垂直居中水平居中的几种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2196.htm" title="Parquet列式文件存储格式">Parquet列式文件存储格式</a></li>
                        <li class="py-2"><a href="/html/category/article-2186.htm" title="Vue项目知识点总结，包含基础，Vue2实践揭秘">Vue项目知识点总结，包含基础，Vue2实践揭秘</a></li>
                        <li class="py-2"><a href="/html/category/article-2183.htm" title="Spring Profiles示例">Spring Profiles示例</a></li>
                        <li class="py-2"><a href="/html/category/article-2207.htm" title="详解盒子模型和div布局">详解盒子模型和div布局</a></li>
                        <li class="py-2"><a href="/html/category/article-2192.htm" title="Java 超详细讲解数据结构的应用_java">Java 超详细讲解数据结构的应用_java</a></li>
                        <li class="py-2"><a href="/html/category/article-2219.htm" title="使用VS  新建C++项目">使用VS  新建C++项目</a></li>
                        <li class="py-2"><a href="/html/category/article-2203.htm" title="PHP与JSON的一些常用操作">PHP与JSON的一些常用操作</a></li>
                        <li class="py-2"><a href="/html/category/article-2231.htm" title="antd组件upload上传xlsx文件，并读取文件内容">antd组件upload上传xlsx文件，并读取文件内容</a></li>
                        <li class="py-2"><a href="/html/category/article-2190.htm" title="PHP声明语句">PHP声明语句</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">46</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>