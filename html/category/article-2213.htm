<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2213.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>ElasticSearch SpringBoot集成ES - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>ElasticSearch SpringBoot集成ES</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h3>第一步：pom.xml<br /></h3> <pre><code class="language-XML">    &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;             &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;             &lt;version&gt;6.4.2&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;             &lt;artifactId&gt;transport&lt;/artifactId&gt;             &lt;version&gt;6.4.2&lt;/version&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;                     &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;!-- fastjson --&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.alibaba&lt;/groupId&gt;             &lt;artifactId&gt;fastjson&lt;/artifactId&gt;             &lt;version&gt;1.2.39&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;             &lt;version&gt;3.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.16.20&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;commons-httpclient&lt;/groupId&gt;             &lt;artifactId&gt;commons-httpclient&lt;/artifactId&gt;             &lt;version&gt;3.1&lt;/version&gt;         &lt;/dependency&gt;</code></pre> <h3>第二步：application.properties</h3> <pre><code class="language-XML"># Elasticsearch # 9200端口是用来让HTTP REST API来访问ElasticSearch，而9300端口是传输层监听的默认端口 elasticsearch.ip=127.0.0.1 elasticsearch.port=9300 elasticsearch.pool=5 #注意cluster.name需要与config/elasticsearch.yml中的cluster.name一致 elasticsearch.cluster.name=elasticsearch_cici server.port=8181</code></pre> <h3>第三步：创建员工对象实体类 和 分页类</h3> <p>员工类</p> <pre><code class="language-java">/**  * @Description:Book实体 加上了@Document注解之后，默认情况下这个实体中所有的属性都会被建立索引、并且分词  */ @Data @ToString @NoArgsConstructor public class Employee {     private String id;     private Long version;     String firstName;     String lastName;     String age;     String[] interests; }</code></pre> <p>&nbsp;分页类</p> <pre><code class="language-java">@Data @ToString public class EsPage {      /**      * 当前页      */     private int currentPage;     /**      * 每页显示多少条      */     private int pageSize;      /**      * 总记录数      */     private int recordCount;     /**      * 本页的数据列表      */     private List&lt;Map&lt;String, Object&gt;&gt; recordList;      /**      * 总页数      */     private int pageCount;     /**      * 页码列表的开始索引（包含）      */     private int beginPageIndex;     /**      * 页码列表的结束索引（包含）      */     private int endPageIndex;      /**      * 只接受前4个必要的属性，会自动的计算出其他3个属性的值      *      * @param currentPage      * @param pageSize      * @param recordCount      * @param recordList      */     public EsPage(int currentPage, int pageSize, int recordCount, List&lt;Map&lt;String, Object&gt;&gt; recordList) {         this.currentPage = currentPage;         this.pageSize = pageSize;         this.recordCount = recordCount;         this.recordList = recordList;          // 计算总页码         pageCount = (recordCount + pageSize - 1) / pageSize;          // 计算 beginPageIndex 和 endPageIndex         // &gt;&gt; 总页数不多于10页，则全部显示         if (pageCount &lt;= 10) {             beginPageIndex = 1;             endPageIndex = pageCount;         }         // 总页数多于10页，则显示当前页附近的共10个页码         else {             // 当前页附近的共10个页码（前4个 + 当前页 + 后5个）             beginPageIndex = currentPage - 4;             endPageIndex = currentPage + 5;             // 当前面的页码不足4个时，则显示前10个页码             if (beginPageIndex &lt; 1) {                 beginPageIndex = 1;                 endPageIndex = 10;             }             // 当后面的页码不足5个时，则显示后10个页码             if (endPageIndex &gt; pageCount) {                 endPageIndex = pageCount;                 beginPageIndex = pageCount - 10 + 1;             }         }     } }</code></pre> <h3>第四步：创建config类</h3> <pre><code class="language-java">@Configuration public class ElasticSearchConfig {      private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSearchConfig.class);      /**      * elk集群地址      */     @Value("${elasticsearch.ip}")     private String hostName;      /**      * 端口      */     @Value("${elasticsearch.port}")     private String port;      /**      * 集群名称      */     @Value("${elasticsearch.cluster.name}")     private String clusterName;      /**      * 连接池      */     @Value("${elasticsearch.pool}")     private String poolSize;      /**      * Bean name default  函数名字      *      * @return      */     @Bean(name = "transportClient")     public TransportClient transportClient() {         LOGGER.info("Elasticsearch初始化开始。。。。。");         TransportClient transportClient = null;         try {             // 配置信息             Settings esSetting = Settings.builder()                     .put("cluster.name", clusterName) //集群名字                     .put("client.transport.sniff", true)//增加嗅探机制，找到ES集群                     .put("thread_pool.search.size", Integer.parseInt(poolSize))//增加线程池个数，暂时设为5                     .build();             //配置信息Settings自定义             transportClient = new PreBuiltTransportClient(esSetting);             TransportAddress transportAddress = new TransportAddress(InetAddress.getByName(hostName), Integer.valueOf(port));             transportClient.addTransportAddresses(transportAddress);         } catch (Exception e) {             LOGGER.error("elasticsearch TransportClient create error!!", e);         }         return transportClient;     } }</code></pre> <h3>第五步：创建ES操作工具类</h3> <p>Elasticsearch JAVA操作有三种客户端:<br /> 1、TransportClient<br /> 2、JestClient<br /> 3、RestClient<br /> 还有种是2.3中有的NodeClient,在5.5.1中好像没有了。<br /> 还有种是spring-data-elasticsearch,这里先以TransportClient为例子。</p> <pre><code class="language-java">@Component public class ElasticsearchUtil {      private static final Logger LOGGER = LoggerFactory.getLogger(ElasticsearchUtil.class);      @Autowired     private TransportClient transportClient;      private static TransportClient client;      /**      * @PostContruct是spring框架的注解 spring容器初始化的时候执行该方法      */     @PostConstruct     public void init() {         client = this.transportClient;     }      /**      * 创建索引      *      * @param index      * @return      */     public static boolean createIndex(String index) {         if (!isIndexExist(index)) {             LOGGER.info("Index is not exits!");         }         CreateIndexResponse indexresponse = client.admin().indices().prepareCreate(index).execute().actionGet();         LOGGER.info("执行建立成功？" + indexresponse.isAcknowledged());         return indexresponse.isAcknowledged();     }      /**      * 删除索引      *      * @param index      * @return      */     public static boolean deleteIndex(String index) {         if (!isIndexExist(index)) {             LOGGER.info("Index is not exits!");         }         DeleteIndexResponse dResponse = client.admin().indices().prepareDelete(index).execute().actionGet();         if (dResponse.isAcknowledged()) {             LOGGER.info("delete index " + index + "  successfully!");         } else {             LOGGER.info("Fail to delete index " + index);         }         return dResponse.isAcknowledged();     }      /**      * 判断索引是否存在      *      * @param index      * @return      */     public static boolean isIndexExist(String index) {         IndicesExistsResponse inExistsResponse = client.admin().indices().exists(new IndicesExistsRequest(index)).actionGet();         if (inExistsResponse.isExists()) {             LOGGER.info("Index [" + index + "] is exist!");         } else {             LOGGER.info("Index [" + index + "] is not exist!");         }         return inExistsResponse.isExists();     }      /**      * @Description: 判断inde下指定type是否存在      */     public boolean isTypeExist(String index, String type) {         return isIndexExist(index)                 ? client.admin().indices().prepareTypesExists(index).setTypes(type).execute().actionGet().isExists()                 : false;     }      /**      * 数据添加，正定ID      *      * @param jsonObject 要增加的数据      * @param index      索引，类似数据库      * @param type       类型，类似表      * @param id         数据ID      * @return      */     public static String addData(JSONObject jsonObject, String index, String type, String id) {         IndexResponse response = client.prepareIndex(index, type, id).setSource(jsonObject).get();         LOGGER.info("addData response status:{},id:{}", response.status().getStatus(), response.getId());         return response.getId();     }      /**      * 数据添加      *      * @param jsonObject 要增加的数据      * @param index      索引，类似数据库      * @param type       类型，类似表      * @return      */     public static String addData(JSONObject jsonObject, String index, String type) {         return addData(jsonObject, index, type, UUID.randomUUID().toString().replaceAll("-", "").toUpperCase());     }      /**      * 通过ID删除数据      *      * @param index 索引，类似数据库      * @param type  类型，类似表      * @param id    数据ID      */     public static void deleteDataById(String index, String type, String id) {          DeleteResponse response = client.prepareDelete(index, type, id).execute().actionGet();          LOGGER.info("deleteDataById response status:{},id:{}", response.status().getStatus(), response.getId());     }      /**      * 通过ID 更新数据      *      * @param jsonObject 要增加的数据      * @param index      索引，类似数据库      * @param type       类型，类似表      * @param id         数据ID      * @return      */     public static void updateDataById(JSONObject jsonObject, String index, String type, String id) {          UpdateRequest updateRequest = new UpdateRequest();          updateRequest.index(index).type(type).id(id).doc(jsonObject);          client.update(updateRequest);      }      /**      * 通过ID获取数据      *      * @param index  索引，类似数据库      * @param type   类型，类似表      * @param id     数据ID      * @param fields 需要显示的字段，逗号分隔（缺省为全部字段）      * @return      */     public static Map&lt;String, Object&gt; searchDataById(String index, String type, String id, String fields) {          GetRequestBuilder getRequestBuilder = client.prepareGet(index, type, id);          if (StringUtils.isNotEmpty(fields)) {             getRequestBuilder.setFetchSource(fields.split(","), null);         }          GetResponse getResponse = getRequestBuilder.execute().actionGet();          return getResponse.getSource();     }       /**      * 使用分词查询,并分页      *      * @param index          索引名称      * @param type           类型名称,可传入多个type逗号分隔      * @param startPage      当前页      * @param pageSize       每页显示条数      * @param query          查询条件      * @param fields         需要显示的字段，逗号分隔（缺省为全部字段）      * @param sortField      排序字段      * @param highlightField 高亮字段      * @return      */     public static EsPage searchDataPage(String index, String type, int startPage, int pageSize, QueryBuilder query, String fields, String sortField, String highlightField) {         SearchRequestBuilder searchRequestBuilder = client.prepareSearch(index);         if (StringUtils.isNotEmpty(type)) {             searchRequestBuilder.setTypes(type.split(","));         }         searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH);          // 需要显示的字段，逗号分隔（缺省为全部字段）         if (StringUtils.isNotEmpty(fields)) {             searchRequestBuilder.setFetchSource(fields.split(","), null);         }          //排序字段         if (StringUtils.isNotEmpty(sortField)) {             searchRequestBuilder.addSort(sortField, SortOrder.DESC);         }          // 高亮（xxx=111,aaa=222）         if (StringUtils.isNotEmpty(highlightField)) {             HighlightBuilder highlightBuilder = new HighlightBuilder();              //highlightBuilder.preTags("&lt;span style='color:red' &gt;");//设置前缀             //highlightBuilder.postTags("&lt;/span&gt;");//设置后缀              // 设置高亮字段             highlightBuilder.field(highlightField);             searchRequestBuilder.highlighter(highlightBuilder);         }          //searchRequestBuilder.setQuery(QueryBuilders.matchAllQuery());         searchRequestBuilder.setQuery(query);          // 分页应用         searchRequestBuilder.setFrom(startPage).setSize(pageSize);          // 设置是否按查询匹配度排序         searchRequestBuilder.setExplain(true);          //打印的内容 可以在 Elasticsearch head 和 Kibana  上执行查询         LOGGER.info("\n{}", searchRequestBuilder);          // 执行搜索,返回搜索响应信息         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();          long totalHits = searchResponse.getHits().totalHits;         long length = searchResponse.getHits().getHits().length;          LOGGER.debug("共查询到[{}]条数据,处理数据条数[{}]", totalHits, length);          if (searchResponse.status().getStatus() == 200) {             // 解析对象             List&lt;Map&lt;String, Object&gt;&gt; sourceList = setSearchResponse(searchResponse, highlightField);              return new EsPage(startPage, pageSize, (int) totalHits, sourceList);         }          return null;      }       /**      * 使用分词查询      *      * @param index          索引名称      * @param type           类型名称,可传入多个type逗号分隔      * @param query          查询条件      * @param size           文档大小限制      * @param fields         需要显示的字段，逗号分隔（缺省为全部字段）      * @param sortField      排序字段      * @param highlightField 高亮字段      * @return      */     public static List&lt;Map&lt;String, Object&gt;&gt; searchListData(             String index, String type, QueryBuilder query, Integer size,             String fields, String sortField, String highlightField) {          SearchRequestBuilder searchRequestBuilder = client.prepareSearch(index);         if (StringUtils.isNotEmpty(type)) {             searchRequestBuilder.setTypes(type.split(","));         }          if (StringUtils.isNotEmpty(highlightField)) {             HighlightBuilder highlightBuilder = new HighlightBuilder();             // 设置高亮字段             highlightBuilder.field(highlightField);             searchRequestBuilder.highlighter(highlightBuilder);         }          searchRequestBuilder.setQuery(query);          if (StringUtils.isNotEmpty(fields)) {             searchRequestBuilder.setFetchSource(fields.split(","), null);         }         searchRequestBuilder.setFetchSource(true);          if (StringUtils.isNotEmpty(sortField)) {             searchRequestBuilder.addSort(sortField, SortOrder.DESC);         }          if (size != null &amp;&amp; size &gt; 0) {             searchRequestBuilder.setSize(size);         }          //打印的内容 可以在 Elasticsearch head 和 Kibana  上执行查询         LOGGER.info("\n{}", searchRequestBuilder);          SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();          long totalHits = searchResponse.getHits().totalHits;         long length = searchResponse.getHits().getHits().length;          LOGGER.info("共查询到[{}]条数据,处理数据条数[{}]", totalHits, length);          if (searchResponse.status().getStatus() == 200) {             // 解析对象             return setSearchResponse(searchResponse, highlightField);         }         return null;      }       /**      * 高亮结果集 特殊处理      *      * @param searchResponse      * @param highlightField      */     private static List&lt;Map&lt;String, Object&gt;&gt; setSearchResponse(SearchResponse searchResponse, String highlightField) {         List&lt;Map&lt;String, Object&gt;&gt; sourceList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();         StringBuffer stringBuffer = new StringBuffer();          for (SearchHit searchHit : searchResponse.getHits().getHits()) {             searchHit.getSourceAsMap().put("id", searchHit.getId());              if (StringUtils.isNotEmpty(highlightField)) {                  System.out.println("遍历 高亮结果集，覆盖 正常结果集" + searchHit.getSourceAsMap());                 Text[] text = searchHit.getHighlightFields().get(highlightField).getFragments();                  if (text != null) {                     for (Text str : text) {                         stringBuffer.append(str.string());                     }                     //遍历 高亮结果集，覆盖 正常结果集                     searchHit.getSourceAsMap().put(highlightField, stringBuffer.toString());                 }             }             sourceList.add(searchHit.getSourceAsMap());         }         return sourceList;     } }</code></pre> <h3>第六步：创建controller</h3> <pre><code class="language-java">@RestController @RequestMapping("/es") public class EsController {      /**      * 测试索引      */     private String indexName = "megacorp";      /**      * 类型      */     private String esType = "employee";      /**      * 创建索引      * http://127.0.0.1:8080/es/createIndex      * @param request      * @param response      * @return      */     @RequestMapping("/createIndex")     public String createIndex(HttpServletRequest request, HttpServletResponse response) {         if (!ElasticsearchUtil.isIndexExist(indexName)) {             ElasticsearchUtil.createIndex(indexName);         } else {             return "索引已经存在";         }         return "索引创建成功";     }      /**      * 插入记录      *      * @return      */     @RequestMapping("/insertJson")     public String insertJson() {         JSONObject jsonObject = new JSONObject();         jsonObject.put("id", DateUtil.formatDate(new Date()));         jsonObject.put("age", 25);         jsonObject.put("first_name", "j-" + new Random(100).nextInt());         jsonObject.put("last_name", "cccc");         jsonObject.put("about", "i like xiaofeng baby");         jsonObject.put("date", new Date());         String id = ElasticsearchUtil.addData(jsonObject, indexName, esType, jsonObject.getString("id"));         return id;     }      /**      * 插入记录      *      * @return      */     @RequestMapping("/insertModel")     public String insertModel() {         Employee employee = new Employee();         employee.setId("66");         employee.setFirstName("m-" + new Random(100).nextInt());         employee.setAge("24");         JSONObject jsonObject = (JSONObject) JSONObject.toJSON(employee);         String id = ElasticsearchUtil.addData(jsonObject, indexName, esType, jsonObject.getString("id"));         return id;     }      /**      * 删除记录      *      * @return      */     @RequestMapping("/delete")     public String delete(String id) {         if (StringUtils.isNotBlank(id)) {             ElasticsearchUtil.deleteDataById(indexName, esType, id);             return "删除id=" + id;         } else {             return "id为空";         }     }      /**      * 更新数据      *      * @return      */     @RequestMapping("/update")     public String update(String id) {         if (StringUtils.isNotBlank(id)) {             JSONObject jsonObject = new JSONObject();             jsonObject.put("id", id);             jsonObject.put("age", 31);             jsonObject.put("name", "修改");             jsonObject.put("date", new Date());             ElasticsearchUtil.updateDataById(jsonObject, indexName, esType, id);             return "id=" + id;         } else {             return "id为空";         }     }      /**      * 获取数据      * http://127.0.0.1:8080/es/getData?id=2018-04-25%2016:33:44      *      * @param id      * @return      */     @RequestMapping("/getData")     public String getData(String id) {         if (StringUtils.isNotBlank(id)) {             Map&lt;String, Object&gt; map = ElasticsearchUtil.searchDataById(indexName, esType, id, null);             return JSONObject.toJSONString(map);         } else {             return "id为空";         }     }      /**      * 查询数据      * 模糊查询      *      * @return      */     @RequestMapping("/queryMatchData")     public String queryMatchData() {         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();         boolean matchPhrase = false;         if (matchPhrase == Boolean.TRUE) {             //不进行分词搜索             boolQuery.must(QueryBuilders.matchPhraseQuery("first_name", "cici"));         } else {             boolQuery.must(QueryBuilders.matchQuery("last_name", "cici"));         }         List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.                 searchListData(indexName, esType, boolQuery, 10, "first_name", null, "last_name");         return JSONObject.toJSONString(list);     }      /**      * 通配符查询数据      * 通配符查询 ?用来匹配1个任意字符，*用来匹配零个或者多个字符      *      * @return      */     @RequestMapping("/queryWildcardData")     public String queryWildcardData() {         QueryBuilder queryBuilder = QueryBuilders.wildcardQuery("first_name.keyword", "cici");         List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, queryBuilder, 10, null, null, null);         return JSONObject.toJSONString(list);     }      /**      * 正则查询      *      * @return      */     @RequestMapping("/queryRegexpData")     public String queryRegexpData() {         QueryBuilder queryBuilder = QueryBuilders.regexpQuery("first_name.keyword", "m--[0-9]{1,11}");         List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, queryBuilder, 10, null, null, null);         return JSONObject.toJSONString(list);     }      /**      * 查询数字范围数据      *      * @return      */     @RequestMapping("/queryIntRangeData")     public String queryIntRangeData() {         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();         boolQuery.must(QueryBuilders.rangeQuery("age").from(24)                 .to(25));         List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, boolQuery, 10, null, null, null);         return JSONObject.toJSONString(list);     }      /**      * 查询日期范围数据      *      * @return      */     @RequestMapping("/queryDateRangeData")     public String queryDateRangeData() {         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();         boolQuery.must(QueryBuilders.rangeQuery("age").from("20")                 .to("50"));         List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, boolQuery, 10, null, null, null);         return JSONObject.toJSONString(list);     }      /**      * 查询分页      *      * @param startPage 第几条记录开始      *                  从0开始      *                  第1页 ：http://127.0.0.1:8080/es/queryPage?startPage=0&amp;pageSize=2      *                  第2页 ：http://127.0.0.1:8080/es/queryPage?startPage=2&amp;pageSize=2      * @param pageSize  每页大小      * @return      */     @RequestMapping("/queryPage")     public String queryPage(String startPage, String pageSize) {         if (StringUtils.isNotBlank(startPage) &amp;&amp; StringUtils.isNotBlank(pageSize)) {             BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();             boolQuery.must(QueryBuilders.rangeQuery("age").from("20")                     .to("100"));             EsPage list = ElasticsearchUtil.searchDataPage(indexName, esType, Integer.parseInt(startPage), Integer.parseInt(pageSize), boolQuery, null, null, null);             return JSONObject.toJSONString(list);         } else {             return "startPage或者pageSize缺失";         }     } }</code></pre> <p>利用postman一个个请求。<br /> 截取结果如下：方法都能正常准确访问</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220602/9b5870fed679cdfdf80291a7ce5df7e5.jpg"></p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2212.htm">Pandas读取文件时报错Initializing from file failed</a></p>
                                                        <p>下一个：<a href="/html/category/article-2214.htm">Mybatis中，返回一个多条数据（List）时，resultType的值指定的不是List，而是List中的元素类型</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2216.htm" title="Spring Boot教程 | 第八篇：Spring Boot整合knife4j（swagger-bootstrap-ui）实现自动API文档">Spring Boot教程 | 第八篇：Spring Boot整合knife4j（swagger-bootstrap-ui）实现自动API文档</a></li>
                        <li class="py-2"><a href="/html/category/article-2211.htm" title="再谈JavaScript中bind、call、apply三个方法的区别与使用方式_javascript技巧">再谈JavaScript中bind、call、apply三个方法的区别与使用方式_javascript技巧</a></li>
                        <li class="py-2"><a href="/html/category/article-2212.htm" title="Pandas读取文件时报错Initializing from file failed">Pandas读取文件时报错Initializing from file failed</a></li>
                        <li class="py-2"><a href="/html/category/article-2230.htm" title="当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？">当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2213.htm" title="ElasticSearch SpringBoot集成ES">ElasticSearch SpringBoot集成ES</a></li>
                        <li class="py-2"><a href="/html/category/article-2543.htm" title="rancher安装redis集群">rancher安装redis集群</a></li>
                        <li class="py-2"><a href="/html/category/article-2238.htm" title="DeferredResult异步处理spring mvc Demo">DeferredResult异步处理spring mvc Demo</a></li>
                        <li class="py-2"><a href="/html/category/article-2222.htm" title="C++笔记 第六十三课 C语言异常处理&#8212;狄泰学院">C++笔记 第六十三课 C语言异常处理&#8212;狄泰学院</a></li>
                        <li class="py-2"><a href="/html/category/article-2223.htm" title="Python实现数据透视表">Python实现数据透视表</a></li>
                        <li class="py-2"><a href="/html/category/article-2233.htm" title="k8s 部署Redis集群">k8s 部署Redis集群</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>