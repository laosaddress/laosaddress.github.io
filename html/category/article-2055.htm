<!DOCTYPE html>
<html>

<head>
        <link rel="canonical" href="https://laosaddress.github.io/html/category/article-2055.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>C++ 程序编译过程 - Laos Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/laosaddress/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/font-awesome/css/font-awesome.min.css">
    <!-- Google fonts - Poppins-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,600">
    <!-- Lightbox-->
    <link rel="stylesheet" href="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/css/lightbox.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/fontastic.css">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/laosaddress/custom.css">
    <!-- Tweaks for older IEs-->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?a08ccaf1644b67c8d98a3563104919a8";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                                <a href="/" class="navbar-brand">
                    Laos Address
                </a>
                
                <button type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right">Menu<i class="fa fa-bars ml-2"></i></button>
                <div id="navbarSupportedContent" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/" class="nav-link">首页</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="/html/category/" class="nav-link">文章分类</a></li>
                                                <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">关于</a></li>
                        <!-- Link-->
                        <li class="nav-item"> <a href="#" class="nav-link">联系</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Hero Section-->
    <section class="hero">
        <div class="container text-center">
            <h1>C++ 程序编译过程</h1>
            <nav aria-label="breadcrumb" class="d-flex justify-content-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/" class="animsition-link">首页</a></li>
                    <li class="breadcrumb-item"><a href="/html/category/" class="animsition-link">文章分类</a></li>
                    <li aria-current="page" class="breadcrumb-item active">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <section>
        <div class="container">
            <div class="row" id="list">
                <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h1><a id="_1" rel="nofollow"></a>前言</h1> <p>C语言的编译链接过程要把我们编写的一个c程序（源代码）转换成可以在硬件上运行的程序（可执行代码），需要进行编译和链接。编译就是把文本形式源代码翻译为机器语言形式的目标文件的过程。链接是把目标文件、操作系统的启动代码和用到的库文件进行组织，形成最终生成可执行代码的过程。过程图解如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220707/5481fd36325b43530acb71b2605343f6.jpg" alt="C++ 程序编译过程"></p> <p>从图上可以看到，整个代码的编译过程分为编译和链接两个过程，编译对应图中的大括号括起的部分，其余则为链接过程。</p> <h1><a id="1__8" rel="nofollow"></a>1. 编译过程</h1> <p>编译过程又可以分成两个阶段：编译和汇编。</p> <p><strong>编译</strong><br /> 编译是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码，源文件的编译过程包含两个主要阶段：</p> <p><strong>编译预处理</strong><br /> 读取c源程序，对其中的伪指令（以# 开头的指令）和特殊符号进行处理。<br /> 伪指令主要包括以下四个方面：</p> <ol> <li>宏定义指令，如# define Name TokenString，# undef等。<br /> 对于前一个伪指令，预编译所要做的是将程序中的所有Name用TokenString替换，但作为字符串常量的 Name则不被替换。对于后者，则将取消对某个宏的定义，使以后该串的出现不再被替换。</li> <li>条件编译指令，如# ifdef，# ifndef，# else，# elif，# endif等。<br /> 这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。预编译程序将根据有关的文件，将那些不必要的代码过滤掉。</li> <li>头文件包含指令，如# include “FileName” 或者# include &lt; FileName&gt; 等。<br /> 在头文件中一般用伪指令# define定义了大量的宏（最常见的是字符常量），同时包含有各种外部符号的声明。<br /> 采用头文件的目的主要是为了使某些定义可以供多个不同的C源程序使用。因为在需要用到这些定义的C源程序中，只需加上一条# include语句即可，而不必再在此文件中将这些定义重复一遍。预编译程序将把头文件中的定义统统都加入到它所产生的输出文件中，以供编译程序对之进行处理。<br /> 包含到c源程序中的头文件可以是系统提供的，这些头文件一般被放在/ usr/ include目录下。在程序中# include它们要使用尖括号（&lt; &gt;）。另外开发人员也可以定义自己的头文件，这些文件一般与c源程序放在同一目录下，此时在# include中要用双引号（""）。</li> <li>特殊符号，预编译程序可以识别一些特殊的符号。<br /> 例如在源程序中出现的LINE标识将被解释为当前行号（十进制数），FILE则被解释为当前被编译的C源程序的名称。预编译程序对于在源程序中出现的这些串将用合适的值进行替换。</li> </ol> <p>预编译程序所完成的基本上是对源程序的“替代”工作。经过此种替代，生成一个没有宏定义、没有条件编译指令、没有特殊符号的输出文件。这个文件的含义同没有经过预处理的源文件是相同的，但内容有所不同。下一步，此输出文件将作为编译程序的输入而被翻译成为机器指令。</p> <p><strong>编译、优化阶段</strong><br /> 经过预编译得到的输出文件中，只有常量；如数字、字符串、变量的定义，以及C语言的关键字，如main, if , else , for , while , { , } , + , - , * , \ 等等。</p> <p>编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码。</p> <p>优化处理是编译系统中一项比较艰深的技术。它涉及到的问题不仅同编译技术本身有关，而且同机器的硬件环境也有很大的关系。优化一部分是对中间代码的优化。这种优化不依赖于具体的计算机。另一种优化则主要针对目标代码的生成而进行的。</p> <p>对于前一种优化，主要的工作是删除公共表达式、循环优化（代码外提、强度削弱、变换循环控制条件、已知量的合并等）、复写传播，以及无用赋值的删除，等等。</p> <p>后一种类型的优化同机器的硬件结构密切相关，最主要的是考虑是如何充分利用机器的各个硬件寄存器存放有关变量的值，以减少对于内存的访问次数。另外，如何根据机器硬件执行指令的特点（如流水线、RISC、CISC、VLIW等）而对指令进行一些调整使目标代码比较短，执行的效率比较高，也是一个重要的研究课题。</p> <p>经过优化得到的汇编代码必须经过汇编程序的汇编转换成相应的机器指令，方可能被机器执行。</p> <p><strong>汇编</strong><br /> 汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个C语言源程序，都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。</p> <p>目标文件由段组成。通常一个目标文件中至少有两个段：</p> <ol> <li>代码段：该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写。</li> <li>数据段：主要存放程序中要用到的各种全局变量或静态的数据。一般数据段都是可读，可写，可执行的。</li> </ol> <p>UNIX环境下主要有三种类型的目标文件：</p> <ol> <li>可重定位文件<br /> 其中包含有适合于其它目标文件链接来创建一个可执行的或者共享的目标文件的代码和数据。</li> <li>共享的目标文件<br /> 这种文件存放了适合于在两种上下文里链接的代码和数据。<br /> 第一种是链接程序可把它与其它可重定位文件及共享的目标文件一起处理来创建另一个目标文件；<br /> 第二种是动态链接程序将它与另一个可执行文件及其它的共享目标文件结合到一起，创建一个进程映象。</li> <li>可执行文件<br /> 它包含了一个可以被操作系统创建一个进程来执行之的文件。</li> </ol> <p>汇编程序生成的实际上是第一种类型的目标文件。对于后两种还需要其他的一些处理方能得到，这个就是链接程序的工作了。</p> <h1><a id="2__62" rel="nofollow"></a>2. 链接过程</h1> <p>由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。</p> <p>例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。</p> <p>链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。</p> <p>根据开发人员指定的同库函数的链接方式的不同，链接处理可分为两种：</p> <ol> <li>静态链接<br /> 在这种链接方式下，函数的代码将从其所在的静态链接库中被拷贝到最终的可执行程序中。这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。</li> <li>动态链接<br /> 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。</li> </ol> <p>对于可执行文件中的函数调用，可分别采用动态链接或静态链接的方法。使用动态链接能够使最终的可执行文件比较短小，并且当共享对象被多个进程使用时能节约一些内存，因为在内存中只需要保存一份此共享对象的代码。但并不是使用动态链接就一定比使用静态链接要优越。在某些情况下动态链接可能带来一些性能上损害。</p> <h1><a id="3_GCC_77" rel="nofollow"></a>3. GCC的编译链接</h1> <p>我们在linux使用的gcc编译器便是把以上的几个过程进行捆绑，使用户只使用一次命令就把编译工作完成，这的确方便了编译工作，但对于初学者了解编译过程就很不利了，下图便是gcc代理的编译过程：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220707/a32a9afe14f498fae6accf7aeef15023.jpg" alt="C++ 程序编译过程"><br /> 从上图可以看到：</p> <ol> <li>预编译<br /> 将.c 文件转化成 .i文件<br /> 使用的gcc命令是：gcc –E<br /> 对应于预处理命令cpp</li> <li>编译<br /> 将.c/.h文件转换成.s文件<br /> 使用的gcc命令是：gcc –S<br /> 对应于编译命令 cc –S</li> <li>汇编<br /> 将.s 文件转化成 .o文件<br /> 使用的gcc 命令是：gcc –c<br /> 对应于汇编命令是 as</li> <li>链接<br /> 将.o文件转化成可执行程序<br /> 使用的gcc 命令是： gcc<br /> 对应于链接命令是 ld</li> </ol> <p>总结起来编译过程就上面的四个过程：预编译处理(.c) －－&gt; 编译、优化程序（.s、.asm）－－&gt; 汇编程序(.obj、.o、.a、.ko) －－&gt; 链接程序（.exe、.elf、.axf等）。</p> <h1><a id="4__100" rel="nofollow"></a>4. 总结</h1> <p>C语言编译的整个过程是非常复杂的，里面涉及到的编译器知识、硬件知识、工具链知识都是非常多的，深入了解整个编译过程对工程师理解应用程序的编写是有很大帮助的，希望大家可以多了解一些，在遇到问题时多思考、多实践。</p> <p>一般情况下，我们只需要知道分成编译和链接两个阶段，编译阶段将源程序（*.c) 转换成为目标代码（一般是obj文件，至于具体过程就是上面说的那些阶段），链接阶段是把源程序转换成的目标代码（obj文件）与你程序里面调用的库函数对应的代码连接起来形成对应的可执行文件（exe文件）就可以了，其他的都需要在实践中多多体会才能有更深的理解。</p> <hr/> <hr/> <hr/> <p>C/C++编译过程<br /> C/C++编译过程主要分为4个过程<br /><font color="blue"> 1) 编译预处理<br /> 2) 编译、优化阶段<br /> 3) 汇编过程<br /> 4) 链接程序</font><br /><font color="red"> 一、编译预处理</font><br /><font size="2"><strong>（1）宏定义指令</strong>，如#define Name TokenString，#undef等。 对于前一个伪指令，预编译所要做的是将程序中的所有Name用TokenString替换，<br /> 但作为字符串常量的 Name则不被替换。对于后者，则将取消对某个宏的定义，使以后该串的出现不再被替换。<br /><strong>（2）条件编译指令</strong>，如#ifdef，#ifndef，#else，#elif，#endif等。 这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。<br /> 预编译程序将根据有关的文件，将那些不必要的代码过滤掉<br /><strong>（3） 头文件包含指令</strong>，如#include “FileName"或者#include 等。 在头文件中一般用伪指令#define定义了大量的宏（最常见的是字符常量），<br /> 同时包含有各种外部符号的声明。 包含到c源程序中的头文件可以是系统提供的，这些头文件一般被放在/usr/include目录下。<br /> 在程序中#include它们要使用尖括号（&lt; &gt;）。<br /> 另外开发人员也可以定义自己的头文件，这些文件一般与c源程序放在同一目录下，此时在#include中要用双引号（”"）。<br /><strong>（4）特殊符号</strong>，预编译程序可以识别一些特殊的符号。 例如在源程序中出现的#line标识将被解释为当前行号（十进制数），<br /> 上面程序实现了对宏line的运用<br /><strong>（5）预处理模块</strong> 预处理工作由#pragma命令完成，#Pragma命令将设定编译器的状态或者是指示编译器完成一些特定的动作。<br /> #pragma指令对每个编译器给出了一个方法,在保持与C和C++语言完全兼容的情况下,给出主机或操作系统专有的特征。<br /> 依据定义,编译指示是机器或操作系统专有的,且对于每个编译器都是不同的。<br /> 打开C标准库函数，如stdio.h，我们总能找到下面这一句指示编译器初始化堆栈</font></p> <pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"iostream"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">line</span><span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">using</span><span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"__LINE__:"</span><span class="token operator">&lt;&lt;</span><span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>/*--------------------</p> <ul> <li>输出结果为：</li> <li><strong>LINE</strong>:103</li> <li>本来输出的结果应该是 7，但是用#line指定行号之后，使下一行的行号变为,</li> <li>到输出语句恰为行103<br /> ---------------------*/<br /> C/C++编译过程<br /> 或者程序指示编译器去链接系统动态链接库或用户自定义链接库</li> </ul> <p><font color="red">二、编译、优化阶段</font><br /><font size="3">经过预编译得到的输出文件中，只有常量；如数字、字符串、变量的定义，以及C语言的关键字，如main,if,else,for,while,{,}, +,-,*,\等等。<br /> 在<em><strong>《编译原理》</strong></em> 中我们可以了解到一个编译器对程序代码的编译主要分为下面几个过程：</font><br /><font color="blue"> a) 词法分析<br /> b) 语法分析<br /> c) 语义分析<br /> d) 中间代码生成<br /> e) 代码优化<br /> f) 代码生成<br /> g) 符号表管理<br /> h) 将多个步骤组合成趟<br /> i) 编译器构造工具<br /></font><br /><font size="2">在这里我们主要强调对函数压栈方式（函数调用约定）的编译处理<br /> C与C++语言调用方式大体相同，下面是几种常用的调用方式：<br /> __cdecl 是C DECLaration的缩写（declaration，声明），表示C语言默认的函数调用方法：所有参数从右到左依次入栈，<br /> 这些参数由调用者清除，称为手动清栈。被调用函数不需要求调用者传递多少参数，调用者传递过多或者过少的参数，<br /> 甚至完全不同的参数都不会产生编译阶段的错误。<br /> _stdcall 是StandardCall的缩写，是C++的标准调用方式：所有参数从右到左依次入栈，如果是调用类成员的话，<br /> 最后一个入栈的是this指针。这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retnX，X表示参数占用的字节数，<br /> CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。函数在编译的时候就必须确定参数个数，<br /> 并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。<br /> PASCAL 是Pascal语言的函数调用方式，在早期的c/c++语言中使用这种调用方式，<br /> 参数压栈顺序与前两者相反，但现在我们在程序中见到的都是它的演化版本，其实</font></p> <pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span><span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span><span class="token function">_T</span><span class="token punctuation">(</span></span><span class="token string">"GDI32.lib"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span><span class="token expression">_MSC_VER</span></span><span class="token comment">/* * Currently, all MS C compilers for Win32 platforms default to 8 byte * alignment. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span><span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span>_CRT_PACKING<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">/* _MSC_VER */</span></span></code></pre> <p><font size="2">C/C++编译过程<br /> 质是另一种调用方式<br /> _fastcall是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此_fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同。返回方式和_stdcall相当。<br /> _thiscall 是为了解决类成员调用中this指针传递而规定的。_thiscall要求把this指针放在特定寄存器中，该寄存器由编译器决定。VC使用ecx，Borland的C++编译器使用eax。返回方式和_stdcall相当。<br /> _fastcall 和 _thiscall涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以Windows上的COM对象接口都定义为_stdcall调用方式。<br /> C中不加说明默认函数为_cdecl方式（C中也只能用这种方式），C++也一样，但是默认的调用方式可以在IDE环境中设置。简单的我们可以从printf函数看出<br /> printf使用从从左至右压栈，返回int型并由_CRTIMP指定封在动态链接库中。<br /> 通过金典的hello world程序我们可以知道编译器对其argc和argv[]这两个参数进行了压栈，并且argc留在了栈顶<br /> 优化处理是编译系统中一项比较艰深的技术。它涉及到的问题不仅同编译技术本身有关，而且同机器的硬件环境也有很大的关系。优化处理主要分为下面几个过程：</font></p> <p><font color="blue"> 1) 局部优化<br /> a) 基本块的划分<br /> b) 基本块的变换<br /> c) 基本块的DAG表示<br /> d) DAG的应用<br /> e) 构造算法讨论<br /> 2) 控制流分析和循环优化<br /> a) 程序流图与循环<br /></font></p> <pre><code class="prism language-cpp"><span class="token comment">/*经典的hello world*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> _Check_return_opt_ _CRTIMP<span class="token keyword">int</span> __cdecl<span class="token function">printf</span><span class="token punctuation">(</span>_In_z_ _Printf_format_string_<span class="token keyword">const</span><span class="token keyword">char</span><span class="token operator">*</span> _Format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">CALLBACK</span><span class="token expression">_stdcall</span><span class="token comment">/* Windows程序回调函数*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">WINAPI</span><span class="token expression">_stdcall</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">WINAPIV</span><span class="token expression">_cdecl</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">PASCAL</span><span class="token expression">_stdcall</span><span class="token comment">/*在c++语言中使用了StandardCall调用方式*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">PASCAL</span><span class="token expression">_cdecl</span><span class="token comment">/*在c语言中使用了C DECLaration调用方式*/</span></span></code></pre> <p>C/C++编译过程<br /><font color="blue"><br /> b) 循环<br /> c) 循环的查找<br /> d) 可归约流图<br /> e) 循环优化<br /> 3) 数据流的分析与全局优化<br /> a) 一些主要的概念<br /> b) 数据流方程的一般形式<br /> c) 到达一定值数据流方程<br /> d) 可用表达式及其数据流方程<br /> e) 活跃变量数据流方程<br /> f) 复写传播</font><br /> 经过优化得到的汇编代码必须经过汇编程序的汇编转换成相应的机器指令，方可能被机器执行。</p> <p><font color="red">三、汇编过程</font><br /><font size="2">汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个C语言源程序，<br /> 都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。<br /> 目标文件由段组成。通常一个目标文件中至少有两个段： 代码段：该段中所包含的主要是程序的指令。<br /> 该段一般是可读和可执行的，但一般却不可写。 数据段：主要存放程序中要用到的各种全局变量或静态的数据。一般数据段都是可读，可写，可执行的。</font></p> <p><font color="red">四、链接程序</font><br /><font size="2">由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。<br /> 例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；<br /> 在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。<br /> 链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，<br /> 使得所有的这些目标文件成为一个能够诶操作系统装入执行的统一整体。<br /> 根据开发人员指定的同库函数的链接方式的不同，链接处理可分为两种：<br /> （1）静态链接 在这种链接方式下，函数的代码将从其所在地静态链接库中被拷贝到最终的可执行程序中。<br /> 这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，<br /> 其中的每个文件含有库中的一个或者一组相关函数的代码。<br /> （2） 动态链接<br /> 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。C/C++编译过程对于可执行文件中的函数调用，可分别采用动态链接或静态链接的方法。使用动态链接能够使最终的可执行文件比较短小，并且当共享对象被多个进程使用时能节约一些内存，因为在内存中只需要保存一份此共享对象的代码。但并不是使用动态链接就一定比使用静态链接要优越。在某些情况下动态链接可能带来一些性能上损害。<br /> ----------------------------------------------------作者 张彦升</font><br /><font size="3">文章转载自：https://www.cnblogs.com/mickole/articles/3659112.html</font></p> </div> 			                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2054.htm">vue extend+promise封装全局弹窗组件_vue.js_</a></p>
                                                        <p>下一个：<a href="/html/category/article-2056.htm">vue下直接用format方法（解决ios时new Date（“yyyy-MM-dd”）问题）</a></p>
                                                    </div>
                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2543.htm" title="rancher安装redis集群">rancher安装redis集群</a></li>
                        <li class="py-2"><a href="/html/category/article-2235.htm" title="JavaScript 编写猜拳游戏">JavaScript 编写猜拳游戏</a></li>
                        <li class="py-2"><a href="/html/category/article-2201.htm" title="mybatis 之别名">mybatis 之别名</a></li>
                        <li class="py-2"><a href="/html/category/article-3744.htm" title="SpringSecurity之OAuth2 令牌accessToken的生成过程">SpringSecurity之OAuth2 令牌accessToken的生成过程</a></li>
                        <li class="py-2"><a href="/html/category/article-2223.htm" title="Python实现数据透视表">Python实现数据透视表</a></li>
                        <li class="py-2"><a href="/html/category/article-2218.htm" title="kotlin增加静态扩展函数">kotlin增加静态扩展函数</a></li>
                        <li class="py-2"><a href="/html/category/article-3770.htm" title="Java 使用 Maven BOM 统一管理版本号_在线工具">Java 使用 Maven BOM 统一管理版本号_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2254.htm" title="有关vue3中vuex mapStates、mapMutations 和 mapActions的自定义方法">有关vue3中vuex mapStates、mapMutations 和 mapActions的自定义方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2197.htm" title="vue3 toRef() 函数">vue3 toRef() 函数</a></li>
                        <li class="py-2"><a href="/html/category/article-2231.htm" title="antd组件upload上传xlsx文件，并读取文件内容">antd组件upload上传xlsx文件，并读取文件内容</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
        <footer class="main-footer">
        <div class="copyrights">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 text-center text-lg-left">
                        <p class="copyrights-text mb-3 mb-lg-0">
                          Laos Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-center text-lg-right">
                        <ul class="list-inline social mb-0">
                            <li class="list-inline-item"><a href="#" class="social-link"><i class="fa fa-facebook"></i></a><a href="#" class="social-link"><i class="fa fa-twitter"></i></a><a href="#" class="social-link"><i class="fa fa-youtube-play"></i></a><a href="#" class="social-link"><i class="fa fa-vimeo"></i></a><a href="#" class="social-link"><i class="fa fa-pinterest"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript files-->
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/jquery.cookie/jquery.cookie.js"> </script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/lightbox2/js/lightbox.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/laosaddress/front.js"></script>
</body>

</html>